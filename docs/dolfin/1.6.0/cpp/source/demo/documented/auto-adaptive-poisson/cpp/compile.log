This is FFC, the FEniCS Form Compiler, version 1.6.0.
For further information, visit http://www.fenics.org/ffc/.

Compiling form AdaptivePoisson

Compiler stage 1: Analyzing form(s)
-----------------------------------
  
  Geometric dimension:       2
  Number of cell subdomains: 0
  Rank:                      2
  Arguments:                 '(v_0, v_1)'
  Number of coefficients:    0
  Coefficients:              '[]'
  Unique elements:           'CG1(?)'
  Unique sub elements:       'CG1(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Estimated cost of tensor representation: 2
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 0
  quadrature_degree: auto --> 0
  quadrature_rule:   auto --> default
  
  Geometric dimension:       2
  Number of cell subdomains: 0
  Rank:                      1
  Arguments:                 '(v_0)'
  Number of coefficients:    0
  Coefficients:              '[]'
  Unique elements:           'CG1(?)'
  Unique sub elements:       'CG1(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Estimated cost of tensor representation: 0
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 1
  quadrature_degree: auto --> 1
  quadrature_rule:   auto --> default
  
  Geometric dimension:                 2
  Number of cell subdomains:           0
  Number of exterior_facet subdomains: 0
  Rank:                                0
  Arguments:                           '()'
  Number of coefficients:              4
  Coefficients:                        '[w_0, w_1, w_2, w_3]'
  Unique elements:                     'CG1(?), CG2(?)'
  Unique sub elements:                 'CG1(?), CG2(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 4
  representation:    auto --> quadrature
  Selecting quadrature degree based on total polynomial degree of integrand: 3
  quadrature_degree: auto --> 3
  quadrature_rule:   auto --> default
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 2
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 3
  quadrature_degree: auto --> 3
  quadrature_rule:   auto --> default
  
  Geometric dimension:       2
  Number of cell subdomains: 0
  Rank:                      2
  Arguments:                 '(v_0, v_1)'
  Number of coefficients:    1
  Coefficients:              '[w_4]'
  Unique elements:           'DG1(?), B3(?)'
  Unique sub elements:       'DG1(?), B3(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Estimated cost of tensor representation: 1
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 5
  quadrature_degree: auto --> 5
  quadrature_rule:   auto --> default
  
  Geometric dimension:                 2
  Number of cell subdomains:           0
  Number of exterior_facet subdomains: 0
  Rank:                                1
  Arguments:                           '(v_0)'
  Number of coefficients:              4
  Coefficients:                        '[w_0, w_1, w_2, w_4]'
  Unique elements:                     'DG1(?), CG1(?), B3(?)'
  Unique sub elements:                 'DG1(?), CG1(?), B3(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 4
  representation:    auto --> quadrature
  Selecting quadrature degree based on total polynomial degree of integrand: 5
  quadrature_degree: auto --> 5
  quadrature_rule:   auto --> default
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 2
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 5
  quadrature_degree: auto --> 5
  quadrature_rule:   auto --> default
  
  Geometric dimension:                 2
  Number of exterior_facet subdomains: 0
  Number of interior_facet subdomains: 0
  Rank:                                2
  Arguments:                           '(v_0, v_1)'
  Number of coefficients:              1
  Coefficients:                        '[w_6]'
  Unique elements:                     'DG1(?), DG2(?)'
  Unique sub elements:                 'DG1(?), DG2(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 1
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 4
  quadrature_degree: auto --> 4
  quadrature_rule:   auto --> default
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 1
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 4
  quadrature_degree: auto --> 4
  quadrature_rule:   auto --> default
  
  Geometric dimension:                 2
  Number of cell subdomains:           0
  Number of exterior_facet subdomains: 0
  Rank:                                1
  Arguments:                           '(v_0)'
  Number of coefficients:              5
  Coefficients:                        '[w_0, w_1, w_2, w_5, w_6]'
  Unique elements:                     'DG1(?), CG1(?), DG2(?)'
  Unique sub elements:                 'DG1(?), CG1(?), DG2(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 4
  representation:    auto --> quadrature
  Selecting quadrature degree based on total polynomial degree of integrand: 4
  quadrature_degree: auto --> 4
  quadrature_rule:   auto --> default
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 2
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 4
  quadrature_degree: auto --> 4
  quadrature_rule:   auto --> default
  
  Geometric dimension:                 2
  Number of cell subdomains:           0
  Number of exterior_facet subdomains: 0
  Number of interior_facet subdomains: 0
  Rank:                                1
  Arguments:                           '(v_0)'
  Number of coefficients:              4
  Coefficients:                        '[w_3, w_5, w_7, w_8]'
  Unique elements:                     'DG0(?), CG2(?), DG1(?), CG1(?)'
  Unique sub elements:                 'DG0(?), CG2(?), DG1(?), CG1(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 2
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 3
  quadrature_degree: auto --> 3
  quadrature_rule:   auto --> default
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 2
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 3
  quadrature_degree: auto --> 3
  quadrature_rule:   auto --> default
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 2
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 3
  quadrature_degree: auto --> 3
  quadrature_rule:   auto --> default
  
  Geometric dimension:       2
  Number of cell subdomains: 0
  Rank:                      2
  Arguments:                 '(v_0, v_1)'
  Number of coefficients:    0
  Coefficients:              '[]'
  Unique elements:           'CG1(?)'
  Unique sub elements:       'CG1(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 2
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 0
  quadrature_degree: auto --> 0
  quadrature_rule:   auto --> default
  
  Geometric dimension:                 2
  Number of cell subdomains:           0
  Number of exterior_facet subdomains: 0
  Rank:                                1
  Arguments:                           '(v_0)'
  Number of coefficients:              2
  Coefficients:                        '[w_0, w_1]'
  Unique elements:                     'CG1(?)'
  Unique sub elements:                 'CG1(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 1
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 2
  quadrature_degree: auto --> 2
  quadrature_rule:   auto --> default
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 1
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 2
  quadrature_degree: auto --> 2
  quadrature_rule:   auto --> default
  
  Geometric dimension:       2
  Number of cell subdomains: 0
  Rank:                      0
  Arguments:                 '()'
  Number of coefficients:    1
  Coefficients:              '[w_2]'
  Unique elements:           'CG1(?)'
  Unique sub elements:       'CG1(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Estimated cost of tensor representation: 1
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 1
  quadrature_degree: auto --> 1
  quadrature_rule:   auto --> default
  
Compiler stage 1 finished in 0.395868 seconds.

Compiler stage 2: Computing intermediate representation
-------------------------------------------------------
  Computing representation of 6 elements
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Computing representation of 6 dofmaps
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Computing representation of integrals
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  36 entries computed in 0.00068 seconds
  Shape of reference tensor: (3, 3, 2, 2)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 2 dims = [2, 2] indices = [[0, 0], [0, 1], [1, 0], [1, 1]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [2, 2] indices = [[0, 0], [0, 1], [1, 0], [1, 1]]
  External multi index:  rank = 1 dims = [2] indices = [[0], [1]]
  Reusing element from cache
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  3 entries computed in 0.000449 seconds
  Shape of reference tensor: (3,)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 0 dims = [] indices = [[]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 0 dims = [] indices = [[]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Reusing element from cache
  Computing quadrature representation
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  
  QG-utils, psi_tables:
  {6: {FiniteElement('Lagrange', Domain(Cell('triangle', 2), label=None, data=None), 1, quad_scheme=None): {None: {None: {(0, 1): array([[ -1.00000000e+00,  -1.00000000e+00,  -1.00000000e+00,
           -1.00000000e+00,  -1.00000000e+00,  -1.00000000e+00],
         [  8.88178420e-16,   8.88178420e-16,   8.88178420e-16,
            8.88178420e-16,   8.88178420e-16,   8.88178420e-16],
         [  1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
            1.00000000e+00,   1.00000000e+00,   1.00000000e+00]]), (1, 0): array([[-1., -1., -1., -1., -1., -1.],
         [ 1.,  1.,  1.,  1.,  1.,  1.],
         [ 0.,  0.,  0.,  0.,  0.,  0.]]), (0, 0): array([[ 0.10903901,  0.23193337,  0.10903901,  0.65902762,  0.23193337,
           0.65902762],
         [ 0.65902762,  0.65902762,  0.23193337,  0.23193337,  0.10903901,
           0.10903901],
         [ 0.23193337,  0.10903901,  0.65902762,  0.10903901,  0.65902762,
           0.23193337]])}}}, FiniteElement('Lagrange', Domain(Cell('triangle', 2), label=None, data=None), 2, quad_scheme=None): {None: {None: {(0, 1): array([[  5.63843964e-01,   7.22665258e-02,   5.63843964e-01,
           -1.63611049e+00,   7.22665258e-02,  -1.63611049e+00],
         [  8.38218384e-15,   7.93809463e-15,   8.04911693e-15,
            6.21724894e-15,   7.71605002e-15,   6.16173779e-15],
         [ -7.22665258e-02,  -5.63843964e-01,   1.63611049e+00,
           -5.63843964e-01,   1.63611049e+00,  -7.22665258e-02],
         [  2.63611049e+00,   2.63611049e+00,   9.27733474e-01,
            9.27733474e-01,   4.36156036e-01,   4.36156036e-01],
         [ -4.91577438e-01,   4.91577438e-01,  -2.19995445e+00,
            2.19995445e+00,  -1.70837702e+00,   1.70837702e+00],
         [ -2.63611049e+00,  -2.63611049e+00,  -9.27733474e-01,
           -9.27733474e-01,  -4.36156036e-01,  -4.36156036e-01]]), (1, 0): array([[ 0.56384396,  0.07226653,  0.56384396, -1.63611049,  0.07226653,
          -1.63611049],
         [ 1.63611049,  1.63611049, -0.07226653, -0.07226653, -0.56384396,
          -0.56384396],
         [ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
           0.        ],
         [ 0.92773347,  0.43615604,  2.63611049,  0.43615604,  2.63611049,
           0.92773347],
         [-0.92773347, -0.43615604, -2.63611049, -0.43615604, -2.63611049,
          -0.92773347],
         [-2.19995445, -1.70837702, -0.49157744,  1.70837702,  0.49157744,
           2.19995445]]), (0, 0): array([[-0.08526   , -0.12434719, -0.08526   ,  0.20960719, -0.12434719,
           0.20960719],
         [ 0.20960719,  0.20960719, -0.12434719, -0.12434719, -0.08526   ,
          -0.08526   ],
         [-0.12434719, -0.08526   ,  0.20960719, -0.08526   ,  0.20960719,
          -0.12434719],
         [ 0.61140199,  0.28743888,  0.61140199,  0.10115914,  0.28743888,
           0.10115914],
         [ 0.10115914,  0.10115914,  0.28743888,  0.28743888,  0.61140199,
           0.61140199],
         [ 0.28743888,  0.61140199,  0.10115914,  0.61140199,  0.10115914,
           0.28743888]])}}}, VectorElement('Lagrange', Domain(Cell('triangle', 2), label=None, data=None), 1, dim=2, quad_scheme=None): {None: {None: {(0, 1): array([[[ -1.00000000e+00,  -1.00000000e+00,  -1.00000000e+00,
            -1.00000000e+00,  -1.00000000e+00,  -1.00000000e+00],
          [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
             0.00000000e+00,   0.00000000e+00,   0.00000000e+00]],
  
         [[  8.88178420e-16,   8.88178420e-16,   8.88178420e-16,
             8.88178420e-16,   8.88178420e-16,   8.88178420e-16],
          [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
             0.00000000e+00,   0.00000000e+00,   0.00000000e+00]],
  
         [[  1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
             1.00000000e+00,   1.00000000e+00,   1.00000000e+00],
          [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
             0.00000000e+00,   0.00000000e+00,   0.00000000e+00]],
  
         [[  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
             0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
          [ -1.00000000e+00,  -1.00000000e+00,  -1.00000000e+00,
            -1.00000000e+00,  -1.00000000e+00,  -1.00000000e+00]],
  
         [[  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
             0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
          [  8.88178420e-16,   8.88178420e-16,   8.88178420e-16,
             8.88178420e-16,   8.88178420e-16,   8.88178420e-16]],
  
         [[  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
             0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
          [  1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
             1.00000000e+00,   1.00000000e+00,   1.00000000e+00]]]), (1, 0): array([[[-1., -1., -1., -1., -1., -1.],
          [ 0.,  0.,  0.,  0.,  0.,  0.]],
  
         [[ 1.,  1.,  1.,  1.,  1.,  1.],
          [ 0.,  0.,  0.,  0.,  0.,  0.]],
  
         [[ 0.,  0.,  0.,  0.,  0.,  0.],
          [ 0.,  0.,  0.,  0.,  0.,  0.]],
  
         [[ 0.,  0.,  0.,  0.,  0.,  0.],
          [-1., -1., -1., -1., -1., -1.]],
  
         [[ 0.,  0.,  0.,  0.,  0.,  0.],
          [ 1.,  1.,  1.,  1.,  1.,  1.]],
  
         [[ 0.,  0.,  0.,  0.,  0.,  0.],
          [ 0.,  0.,  0.,  0.,  0.,  0.]]]), (0, 0): array([[[ 0.10903901,  0.23193337,  0.10903901,  0.65902762,  0.23193337,
            0.65902762],
          [ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
            0.        ]],
  
         [[ 0.65902762,  0.65902762,  0.23193337,  0.23193337,  0.10903901,
            0.10903901],
          [ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
            0.        ]],
  
         [[ 0.23193337,  0.10903901,  0.65902762,  0.10903901,  0.65902762,
            0.23193337],
          [ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
            0.        ]],
  
         [[ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
            0.        ],
          [ 0.10903901,  0.23193337,  0.10903901,  0.65902762,  0.23193337,
            0.65902762]],
  
         [[ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
            0.        ],
          [ 0.65902762,  0.65902762,  0.23193337,  0.23193337,  0.10903901,
            0.10903901]],
  
         [[ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
            0.        ],
          [ 0.23193337,  0.10903901,  0.65902762,  0.10903901,  0.65902762,
            0.23193337]]])}}}}}
  
  QG-utils, psi_tables, flat_tables:
  {'FE0_D10': array([[-1.,  1.,  0.],
         [-1.,  1.,  0.],
         [-1.,  1.,  0.],
         [-1.,  1.,  0.],
         [-1.,  1.,  0.],
         [-1.,  1.,  0.]]), 'FE2_C1_D01': array([[  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
           -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
           -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
           -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
           -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
           -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
           -1.00000000e+00,   8.88178420e-16,   1.00000000e+00]]), 'FE0_D01': array([[ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00]]), 'FE2_C0_D01': array([[ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00,
            0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00,
            0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00,
            0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00,
            0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00,
            0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00,
            0.00000000e+00,   0.00000000e+00,   0.00000000e+00]]), 'FE2_C0_D10': array([[-1.,  1.,  0.,  0.,  0.,  0.],
         [-1.,  1.,  0.,  0.,  0.,  0.],
         [-1.,  1.,  0.,  0.,  0.,  0.],
         [-1.,  1.,  0.,  0.,  0.,  0.],
         [-1.,  1.,  0.,  0.,  0.,  0.],
         [-1.,  1.,  0.,  0.,  0.,  0.]]), 'FE2_C1_D10': array([[ 0.,  0.,  0., -1.,  1.,  0.],
         [ 0.,  0.,  0., -1.,  1.,  0.],
         [ 0.,  0.,  0., -1.,  1.,  0.],
         [ 0.,  0.,  0., -1.,  1.,  0.],
         [ 0.,  0.,  0., -1.,  1.,  0.],
         [ 0.,  0.,  0., -1.,  1.,  0.]]), 'FE2_C1': array([[ 0.        ,  0.        ,  0.        ,  0.10903901,  0.65902762,
           0.23193337],
         [ 0.        ,  0.        ,  0.        ,  0.23193337,  0.65902762,
           0.10903901],
         [ 0.        ,  0.        ,  0.        ,  0.10903901,  0.23193337,
           0.65902762],
         [ 0.        ,  0.        ,  0.        ,  0.65902762,  0.23193337,
           0.10903901],
         [ 0.        ,  0.        ,  0.        ,  0.23193337,  0.10903901,
           0.65902762],
         [ 0.        ,  0.        ,  0.        ,  0.65902762,  0.10903901,
           0.23193337]]), 'FE2_C0': array([[ 0.10903901,  0.65902762,  0.23193337,  0.        ,  0.        ,
           0.        ],
         [ 0.23193337,  0.65902762,  0.10903901,  0.        ,  0.        ,
           0.        ],
         [ 0.10903901,  0.23193337,  0.65902762,  0.        ,  0.        ,
           0.        ],
         [ 0.65902762,  0.23193337,  0.10903901,  0.        ,  0.        ,
           0.        ],
         [ 0.23193337,  0.10903901,  0.65902762,  0.        ,  0.        ,
           0.        ],
         [ 0.65902762,  0.10903901,  0.23193337,  0.        ,  0.        ,
           0.        ]]), 'FE1_D01': array([[  5.63843964e-01,   8.38218384e-15,  -7.22665258e-02,
            2.63611049e+00,  -4.91577438e-01,  -2.63611049e+00],
         [  7.22665258e-02,   7.93809463e-15,  -5.63843964e-01,
            2.63611049e+00,   4.91577438e-01,  -2.63611049e+00],
         [  5.63843964e-01,   8.04911693e-15,   1.63611049e+00,
            9.27733474e-01,  -2.19995445e+00,  -9.27733474e-01],
         [ -1.63611049e+00,   6.21724894e-15,  -5.63843964e-01,
            9.27733474e-01,   2.19995445e+00,  -9.27733474e-01],
         [  7.22665258e-02,   7.71605002e-15,   1.63611049e+00,
            4.36156036e-01,  -1.70837702e+00,  -4.36156036e-01],
         [ -1.63611049e+00,   6.16173779e-15,  -7.22665258e-02,
            4.36156036e-01,   1.70837702e+00,  -4.36156036e-01]]), 'FE1_D10': array([[ 0.56384396,  1.63611049,  0.        ,  0.92773347, -0.92773347,
          -2.19995445],
         [ 0.07226653,  1.63611049,  0.        ,  0.43615604, -0.43615604,
          -1.70837702],
         [ 0.56384396, -0.07226653,  0.        ,  2.63611049, -2.63611049,
          -0.49157744],
         [-1.63611049, -0.07226653,  0.        ,  0.43615604, -0.43615604,
           1.70837702],
         [ 0.07226653, -0.56384396,  0.        ,  2.63611049, -2.63611049,
           0.49157744],
         [-1.63611049, -0.56384396,  0.        ,  0.92773347, -0.92773347,
           2.19995445]]), 'FE0': array([[ 0.10903901,  0.65902762,  0.23193337],
         [ 0.23193337,  0.65902762,  0.10903901],
         [ 0.10903901,  0.23193337,  0.65902762],
         [ 0.65902762,  0.23193337,  0.10903901],
         [ 0.23193337,  0.10903901,  0.65902762],
         [ 0.65902762,  0.10903901,  0.23193337]]), 'FE1': array([[-0.08526   ,  0.20960719, -0.12434719,  0.61140199,  0.10115914,
           0.28743888],
         [-0.12434719,  0.20960719, -0.08526   ,  0.28743888,  0.10115914,
           0.61140199],
         [-0.08526   , -0.12434719,  0.20960719,  0.61140199,  0.28743888,
           0.10115914],
         [ 0.20960719, -0.12434719, -0.08526   ,  0.10115914,  0.28743888,
           0.61140199],
         [-0.12434719, -0.08526   ,  0.20960719,  0.28743888,  0.61140199,
           0.10115914],
         [ 0.20960719, -0.08526   , -0.12434719,  0.10115914,  0.61140199,
           0.28743888]])}
  
  tables: {'FE0_D10': array([[-1.,  1.,  0.],
         [-1.,  1.,  0.],
         [-1.,  1.,  0.],
         [-1.,  1.,  0.],
         [-1.,  1.,  0.],
         [-1.,  1.,  0.]]), 'FE2_C1_D01': array([[  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
           -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
           -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
           -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
           -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
           -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
           -1.00000000e+00,   8.88178420e-16,   1.00000000e+00]]), 'FE0_D01': array([[ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00]]), 'FE2_C0_D01': array([[ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00,
            0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00,
            0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00,
            0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00,
            0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00,
            0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00,
            0.00000000e+00,   0.00000000e+00,   0.00000000e+00]]), 'FE2_C0_D10': array([[-1.,  1.,  0.,  0.,  0.,  0.],
         [-1.,  1.,  0.,  0.,  0.,  0.],
         [-1.,  1.,  0.,  0.,  0.,  0.],
         [-1.,  1.,  0.,  0.,  0.,  0.],
         [-1.,  1.,  0.,  0.,  0.,  0.],
         [-1.,  1.,  0.,  0.,  0.,  0.]]), 'FE2_C1_D10': array([[ 0.,  0.,  0., -1.,  1.,  0.],
         [ 0.,  0.,  0., -1.,  1.,  0.],
         [ 0.,  0.,  0., -1.,  1.,  0.],
         [ 0.,  0.,  0., -1.,  1.,  0.],
         [ 0.,  0.,  0., -1.,  1.,  0.],
         [ 0.,  0.,  0., -1.,  1.,  0.]]), 'FE2_C1': array([[ 0.        ,  0.        ,  0.        ,  0.10903901,  0.65902762,
           0.23193337],
         [ 0.        ,  0.        ,  0.        ,  0.23193337,  0.65902762,
           0.10903901],
         [ 0.        ,  0.        ,  0.        ,  0.10903901,  0.23193337,
           0.65902762],
         [ 0.        ,  0.        ,  0.        ,  0.65902762,  0.23193337,
           0.10903901],
         [ 0.        ,  0.        ,  0.        ,  0.23193337,  0.10903901,
           0.65902762],
         [ 0.        ,  0.        ,  0.        ,  0.65902762,  0.10903901,
           0.23193337]]), 'FE2_C0': array([[ 0.10903901,  0.65902762,  0.23193337,  0.        ,  0.        ,
           0.        ],
         [ 0.23193337,  0.65902762,  0.10903901,  0.        ,  0.        ,
           0.        ],
         [ 0.10903901,  0.23193337,  0.65902762,  0.        ,  0.        ,
           0.        ],
         [ 0.65902762,  0.23193337,  0.10903901,  0.        ,  0.        ,
           0.        ],
         [ 0.23193337,  0.10903901,  0.65902762,  0.        ,  0.        ,
           0.        ],
         [ 0.65902762,  0.10903901,  0.23193337,  0.        ,  0.        ,
           0.        ]]), 'FE1_D01': array([[  5.63843964e-01,   8.38218384e-15,  -7.22665258e-02,
            2.63611049e+00,  -4.91577438e-01,  -2.63611049e+00],
         [  7.22665258e-02,   7.93809463e-15,  -5.63843964e-01,
            2.63611049e+00,   4.91577438e-01,  -2.63611049e+00],
         [  5.63843964e-01,   8.04911693e-15,   1.63611049e+00,
            9.27733474e-01,  -2.19995445e+00,  -9.27733474e-01],
         [ -1.63611049e+00,   6.21724894e-15,  -5.63843964e-01,
            9.27733474e-01,   2.19995445e+00,  -9.27733474e-01],
         [  7.22665258e-02,   7.71605002e-15,   1.63611049e+00,
            4.36156036e-01,  -1.70837702e+00,  -4.36156036e-01],
         [ -1.63611049e+00,   6.16173779e-15,  -7.22665258e-02,
            4.36156036e-01,   1.70837702e+00,  -4.36156036e-01]]), 'FE1_D10': array([[ 0.56384396,  1.63611049,  0.        ,  0.92773347, -0.92773347,
          -2.19995445],
         [ 0.07226653,  1.63611049,  0.        ,  0.43615604, -0.43615604,
          -1.70837702],
         [ 0.56384396, -0.07226653,  0.        ,  2.63611049, -2.63611049,
          -0.49157744],
         [-1.63611049, -0.07226653,  0.        ,  0.43615604, -0.43615604,
           1.70837702],
         [ 0.07226653, -0.56384396,  0.        ,  2.63611049, -2.63611049,
           0.49157744],
         [-1.63611049, -0.56384396,  0.        ,  0.92773347, -0.92773347,
           2.19995445]]), 'FE0': array([[ 0.10903901,  0.65902762,  0.23193337],
         [ 0.23193337,  0.65902762,  0.10903901],
         [ 0.10903901,  0.23193337,  0.65902762],
         [ 0.65902762,  0.23193337,  0.10903901],
         [ 0.23193337,  0.10903901,  0.65902762],
         [ 0.65902762,  0.10903901,  0.23193337]]), 'FE1': array([[-0.08526   ,  0.20960719, -0.12434719,  0.61140199,  0.10115914,
           0.28743888],
         [-0.12434719,  0.20960719, -0.08526   ,  0.28743888,  0.10115914,
           0.61140199],
         [-0.08526   , -0.12434719,  0.20960719,  0.61140199,  0.28743888,
           0.10115914],
         [ 0.20960719, -0.12434719, -0.08526   ,  0.10115914,  0.28743888,
           0.61140199],
         [-0.12434719, -0.08526   ,  0.20960719,  0.28743888,  0.61140199,
           0.10115914],
         [ 0.20960719, -0.08526   , -0.12434719,  0.10115914,  0.61140199,
           0.28743888]])}
  
  name_map: {}
  
  inv_name_map: {'FE0_D10': 'FE0_D10', 'FE2_C1_D01': 'FE2_C1_D01', 'FE0_D01': 'FE0_D01', 'FE2_C0': 'FE2_C0', 'FE1': 'FE1', 'FE2_C1_D10': 'FE2_C1_D10', 'FE2_C1': 'FE2_C1', 'FE2_C0_D01': 'FE2_C0_D01', 'FE1_D01': 'FE1_D01', 'FE1_D10': 'FE1_D10', 'FE0': 'FE0', 'FE2_C0_D10': 'FE2_C0_D10'}
  
  QG-utils, psi_tables, unique_tables:
  {'FE0_D01': array([[-1.,  1.],
         [-1.,  1.],
         [-1.,  1.],
         [-1.,  1.],
         [-1.,  1.],
         [-1.,  1.]]), 'FE1_D01': array([[ 0.56384396, -0.07226653,  2.63611049, -0.49157744, -2.63611049],
         [ 0.07226653, -0.56384396,  2.63611049,  0.49157744, -2.63611049],
         [ 0.56384396,  1.63611049,  0.92773347, -2.19995445, -0.92773347],
         [-1.63611049, -0.56384396,  0.92773347,  2.19995445, -0.92773347],
         [ 0.07226653,  1.63611049,  0.43615604, -1.70837702, -0.43615604],
         [-1.63611049, -0.07226653,  0.43615604,  1.70837702, -0.43615604]]), 'FE1_D10': array([[ 0.56384396,  1.63611049,  0.92773347, -0.92773347, -2.19995445],
         [ 0.07226653,  1.63611049,  0.43615604, -0.43615604, -1.70837702],
         [ 0.56384396, -0.07226653,  2.63611049, -2.63611049, -0.49157744],
         [-1.63611049, -0.07226653,  0.43615604, -0.43615604,  1.70837702],
         [ 0.07226653, -0.56384396,  2.63611049, -2.63611049,  0.49157744],
         [-1.63611049, -0.56384396,  0.92773347, -0.92773347,  2.19995445]]), 'FE0': array([[ 0.10903901,  0.65902762,  0.23193337],
         [ 0.23193337,  0.65902762,  0.10903901],
         [ 0.10903901,  0.23193337,  0.65902762],
         [ 0.65902762,  0.23193337,  0.10903901],
         [ 0.23193337,  0.10903901,  0.65902762],
         [ 0.65902762,  0.10903901,  0.23193337]]), 'FE1': array([[-0.08526   ,  0.20960719, -0.12434719,  0.61140199,  0.10115914,
           0.28743888],
         [-0.12434719,  0.20960719, -0.08526   ,  0.28743888,  0.10115914,
           0.61140199],
         [-0.08526   , -0.12434719,  0.20960719,  0.61140199,  0.28743888,
           0.10115914],
         [ 0.20960719, -0.12434719, -0.08526   ,  0.10115914,  0.28743888,
           0.61140199],
         [-0.12434719, -0.08526   ,  0.20960719,  0.28743888,  0.61140199,
           0.10115914],
         [ 0.20960719, -0.08526   , -0.12434719,  0.10115914,  0.61140199,
           0.28743888]])}
  
  QG-utils, psi_tables, name_map:
  {'FE0_D10': ('FE0_D01', (1, [0, 1]), False, False), 'FE2_C1_D01': ('FE0_D01', (8, [3, 5]), False, False), 'FE0_D01': ('FE0_D01', (0, [0, 2]), False, False), 'FE2_C0': ('FE0', (4, [0, 1, 2]), False, False), 'FE1': ('FE1', (), False, False), 'FE2_C1_D10': ('FE0_D01', (9, [3, 4]), False, False), 'FE2_C1': ('FE0', (7, [3, 4, 5]), False, False), 'FE2_C0_D01': ('FE0_D01', (5, [0, 2]), False, False), 'FE1_D01': ('FE1_D01', (2, [0, 2, 3, 4, 5]), False, False), 'FE1_D10': ('FE1_D10', (3, [0, 1, 3, 4, 5]), False, False), 'FE0': ('FE0', (), False, False), 'FE2_C0_D10': ('FE0_D01', (6, [0, 1]), False, False)}
  Transforming cell integral
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00129 seconds
  Shape of reference tensor: (3, 6)
  Primary multi index:   rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00115 seconds
  Shape of reference tensor: (3, 6)
  Primary multi index:   rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00116 seconds
  Shape of reference tensor: (3, 6)
  Primary multi index:   rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Reusing element from cache
  Reusing element from cache
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00119 seconds
  Shape of reference tensor: (3, 3, 1)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [1] indices = [[0]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [1] indices = [[0]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Reusing element from cache
  Reusing element from cache
  Computing quadrature representation
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  
  QG-utils, psi_tables:
  {7: {FiniteElement('Discontinuous Lagrange', Domain(Cell('triangle', 2), label=None, data=None), 1, quad_scheme=None): {None: {None: {(0, 1): array([[ -1.00000000e+00,  -1.00000000e+00,  -1.00000000e+00,
           -1.00000000e+00,  -1.00000000e+00,  -1.00000000e+00,
           -1.00000000e+00],
         [  8.88178420e-16,   8.88178420e-16,   8.88178420e-16,
            8.88178420e-16,   8.88178420e-16,   8.88178420e-16,
            8.88178420e-16],
         [  1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
            1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
            1.00000000e+00]]), (1, 0): array([[-1., -1., -1., -1., -1., -1., -1.],
         [ 1.,  1.,  1.,  1.,  1.,  1.,  1.],
         [ 0.,  0.,  0.,  0.,  0.,  0.,  0.]]), (0, 0): array([[ 0.33333333,  0.10128651,  0.10128651,  0.79742699,  0.47014206,
           0.47014206,  0.05971587],
         [ 0.33333333,  0.79742699,  0.10128651,  0.10128651,  0.05971587,
           0.47014206,  0.47014206],
         [ 0.33333333,  0.10128651,  0.79742699,  0.10128651,  0.47014206,
           0.05971587,  0.47014206]])}}}, FiniteElement('Lagrange', Domain(Cell('triangle', 2), label=None, data=None), 1, quad_scheme=None): {None: {None: {(0, 1): array([[ -1.00000000e+00,  -1.00000000e+00,  -1.00000000e+00,
           -1.00000000e+00,  -1.00000000e+00,  -1.00000000e+00,
           -1.00000000e+00],
         [  8.88178420e-16,   8.88178420e-16,   8.88178420e-16,
            8.88178420e-16,   8.88178420e-16,   8.88178420e-16,
            8.88178420e-16],
         [  1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
            1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
            1.00000000e+00]]), (1, 0): array([[-1., -1., -1., -1., -1., -1., -1.],
         [ 1.,  1.,  1.,  1.,  1.,  1.,  1.],
         [ 0.,  0.,  0.,  0.,  0.,  0.,  0.]]), (0, 0): array([[ 0.33333333,  0.10128651,  0.10128651,  0.79742699,  0.47014206,
           0.47014206,  0.05971587],
         [ 0.33333333,  0.79742699,  0.10128651,  0.10128651,  0.05971587,
           0.47014206,  0.47014206],
         [ 0.33333333,  0.10128651,  0.79742699,  0.10128651,  0.47014206,
           0.05971587,  0.47014206]])}}}, VectorElement('Lagrange', Domain(Cell('triangle', 2), label=None, data=None), 1, dim=2, quad_scheme=None): {None: {None: {(0, 1): array([[[ -1.00000000e+00,  -1.00000000e+00,  -1.00000000e+00,
            -1.00000000e+00,  -1.00000000e+00,  -1.00000000e+00,
            -1.00000000e+00],
          [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
             0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
             0.00000000e+00]],
  
         [[  8.88178420e-16,   8.88178420e-16,   8.88178420e-16,
             8.88178420e-16,   8.88178420e-16,   8.88178420e-16,
             8.88178420e-16],
          [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
             0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
             0.00000000e+00]],
  
         [[  1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
             1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
             1.00000000e+00],
          [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
             0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
             0.00000000e+00]],
  
         [[  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
             0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
             0.00000000e+00],
          [ -1.00000000e+00,  -1.00000000e+00,  -1.00000000e+00,
            -1.00000000e+00,  -1.00000000e+00,  -1.00000000e+00,
            -1.00000000e+00]],
  
         [[  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
             0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
             0.00000000e+00],
          [  8.88178420e-16,   8.88178420e-16,   8.88178420e-16,
             8.88178420e-16,   8.88178420e-16,   8.88178420e-16,
             8.88178420e-16]],
  
         [[  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
             0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
             0.00000000e+00],
          [  1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
             1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
             1.00000000e+00]]]), (1, 0): array([[[-1., -1., -1., -1., -1., -1., -1.],
          [ 0.,  0.,  0.,  0.,  0.,  0.,  0.]],
  
         [[ 1.,  1.,  1.,  1.,  1.,  1.,  1.],
          [ 0.,  0.,  0.,  0.,  0.,  0.,  0.]],
  
         [[ 0.,  0.,  0.,  0.,  0.,  0.,  0.],
          [ 0.,  0.,  0.,  0.,  0.,  0.,  0.]],
  
         [[ 0.,  0.,  0.,  0.,  0.,  0.,  0.],
          [-1., -1., -1., -1., -1., -1., -1.]],
  
         [[ 0.,  0.,  0.,  0.,  0.,  0.,  0.],
          [ 1.,  1.,  1.,  1.,  1.,  1.,  1.]],
  
         [[ 0.,  0.,  0.,  0.,  0.,  0.,  0.],
          [ 0.,  0.,  0.,  0.,  0.,  0.,  0.]]]), (0, 0): array([[[ 0.33333333,  0.10128651,  0.10128651,  0.79742699,  0.47014206,
            0.47014206,  0.05971587],
          [ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
            0.        ,  0.        ]],
  
         [[ 0.33333333,  0.79742699,  0.10128651,  0.10128651,  0.05971587,
            0.47014206,  0.47014206],
          [ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
            0.        ,  0.        ]],
  
         [[ 0.33333333,  0.10128651,  0.79742699,  0.10128651,  0.47014206,
            0.05971587,  0.47014206],
          [ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
            0.        ,  0.        ]],
  
         [[ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
            0.        ,  0.        ],
          [ 0.33333333,  0.10128651,  0.10128651,  0.79742699,  0.47014206,
            0.47014206,  0.05971587]],
  
         [[ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
            0.        ,  0.        ],
          [ 0.33333333,  0.79742699,  0.10128651,  0.10128651,  0.05971587,
            0.47014206,  0.47014206]],
  
         [[ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
            0.        ,  0.        ],
          [ 0.33333333,  0.10128651,  0.79742699,  0.10128651,  0.47014206,
            0.05971587,  0.47014206]]])}}}, FiniteElement('Bubble', Domain(Cell('triangle', 2), label=None, data=None), 3, quad_scheme=None): {None: {None: {(0, 1): array([[ -5.55111512e-15,  -7.10542736e-15,  -1.90376022e+00,
            1.90376022e+00,  -8.99280650e-15,   5.20988266e+00,
           -5.20988266e+00]]), (1, 0): array([[ -9.01903556e-16,  -1.90376022e+00,  -4.91516986e-15,
            1.90376022e+00,   5.20988266e+00,  -9.20683956e-16,
           -5.20988266e+00]]), (0, 0): array([[ 1.        ,  0.22088076,  0.22088076,  0.22088076,  0.35637872,
           0.35637872,  0.35637872]])}}}}}
  
  QG-utils, psi_tables, flat_tables:
  {'FE0_D10': array([[ -9.01903556e-16],
         [ -1.90376022e+00],
         [ -4.91516986e-15],
         [  1.90376022e+00],
         [  5.20988266e+00],
         [ -9.20683956e-16],
         [ -5.20988266e+00]]), 'FE0_D01': array([[ -5.55111512e-15],
         [ -7.10542736e-15],
         [ -1.90376022e+00],
         [  1.90376022e+00],
         [ -8.99280650e-15],
         [  5.20988266e+00],
         [ -5.20988266e+00]]), 'FE3_C0_D01': array([[ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00,
            0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00,
            0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00,
            0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00,
            0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00,
            0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00,
            0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00,
            0.00000000e+00,   0.00000000e+00,   0.00000000e+00]]), 'FE3_C1_D01': array([[  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
           -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
           -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
           -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
           -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
           -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
           -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
           -1.00000000e+00,   8.88178420e-16,   1.00000000e+00]]), 'FE3_C0': array([[ 0.33333333,  0.33333333,  0.33333333,  0.        ,  0.        ,
           0.        ],
         [ 0.10128651,  0.79742699,  0.10128651,  0.        ,  0.        ,
           0.        ],
         [ 0.10128651,  0.10128651,  0.79742699,  0.        ,  0.        ,
           0.        ],
         [ 0.79742699,  0.10128651,  0.10128651,  0.        ,  0.        ,
           0.        ],
         [ 0.47014206,  0.05971587,  0.47014206,  0.        ,  0.        ,
           0.        ],
         [ 0.47014206,  0.47014206,  0.05971587,  0.        ,  0.        ,
           0.        ],
         [ 0.05971587,  0.47014206,  0.47014206,  0.        ,  0.        ,
           0.        ]]), 'FE3_C1': array([[ 0.        ,  0.        ,  0.        ,  0.33333333,  0.33333333,
           0.33333333],
         [ 0.        ,  0.        ,  0.        ,  0.10128651,  0.79742699,
           0.10128651],
         [ 0.        ,  0.        ,  0.        ,  0.10128651,  0.10128651,
           0.79742699],
         [ 0.        ,  0.        ,  0.        ,  0.79742699,  0.10128651,
           0.10128651],
         [ 0.        ,  0.        ,  0.        ,  0.47014206,  0.05971587,
           0.47014206],
         [ 0.        ,  0.        ,  0.        ,  0.47014206,  0.47014206,
           0.05971587],
         [ 0.        ,  0.        ,  0.        ,  0.05971587,  0.47014206,
           0.47014206]]), 'FE3_C0_D10': array([[-1.,  1.,  0.,  0.,  0.,  0.],
         [-1.,  1.,  0.,  0.,  0.,  0.],
         [-1.,  1.,  0.,  0.,  0.,  0.],
         [-1.,  1.,  0.,  0.,  0.,  0.],
         [-1.,  1.,  0.,  0.,  0.,  0.],
         [-1.,  1.,  0.,  0.,  0.,  0.],
         [-1.,  1.,  0.,  0.,  0.,  0.]]), 'FE1_D01': array([[ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00]]), 'FE2': array([[ 0.33333333,  0.33333333,  0.33333333],
         [ 0.10128651,  0.79742699,  0.10128651],
         [ 0.10128651,  0.10128651,  0.79742699],
         [ 0.79742699,  0.10128651,  0.10128651],
         [ 0.47014206,  0.05971587,  0.47014206],
         [ 0.47014206,  0.47014206,  0.05971587],
         [ 0.05971587,  0.47014206,  0.47014206]]), 'FE1_D10': array([[-1.,  1.,  0.],
         [-1.,  1.,  0.],
         [-1.,  1.,  0.],
         [-1.,  1.,  0.],
         [-1.,  1.,  0.],
         [-1.,  1.,  0.],
         [-1.,  1.,  0.]]), 'FE0': array([[ 1.        ],
         [ 0.22088076],
         [ 0.22088076],
         [ 0.22088076],
         [ 0.35637872],
         [ 0.35637872],
         [ 0.35637872]]), 'FE1': array([[ 0.33333333,  0.33333333,  0.33333333],
         [ 0.10128651,  0.79742699,  0.10128651],
         [ 0.10128651,  0.10128651,  0.79742699],
         [ 0.79742699,  0.10128651,  0.10128651],
         [ 0.47014206,  0.05971587,  0.47014206],
         [ 0.47014206,  0.47014206,  0.05971587],
         [ 0.05971587,  0.47014206,  0.47014206]]), 'FE2_D10': array([[-1.,  1.,  0.],
         [-1.,  1.,  0.],
         [-1.,  1.,  0.],
         [-1.,  1.,  0.],
         [-1.,  1.,  0.],
         [-1.,  1.,  0.],
         [-1.,  1.,  0.]]), 'FE2_D01': array([[ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00]]), 'FE3_C1_D10': array([[ 0.,  0.,  0., -1.,  1.,  0.],
         [ 0.,  0.,  0., -1.,  1.,  0.],
         [ 0.,  0.,  0., -1.,  1.,  0.],
         [ 0.,  0.,  0., -1.,  1.,  0.],
         [ 0.,  0.,  0., -1.,  1.,  0.],
         [ 0.,  0.,  0., -1.,  1.,  0.],
         [ 0.,  0.,  0., -1.,  1.,  0.]])}
  
  tables: {'FE0_D10': array([[ -9.01903556e-16],
         [ -1.90376022e+00],
         [ -4.91516986e-15],
         [  1.90376022e+00],
         [  5.20988266e+00],
         [ -9.20683956e-16],
         [ -5.20988266e+00]]), 'FE0_D01': array([[ -5.55111512e-15],
         [ -7.10542736e-15],
         [ -1.90376022e+00],
         [  1.90376022e+00],
         [ -8.99280650e-15],
         [  5.20988266e+00],
         [ -5.20988266e+00]]), 'FE3_C0_D01': array([[ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00,
            0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00,
            0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00,
            0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00,
            0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00,
            0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00,
            0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00,
            0.00000000e+00,   0.00000000e+00,   0.00000000e+00]]), 'FE3_C1_D01': array([[  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
           -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
           -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
           -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
           -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
           -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
           -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
           -1.00000000e+00,   8.88178420e-16,   1.00000000e+00]]), 'FE3_C0': array([[ 0.33333333,  0.33333333,  0.33333333,  0.        ,  0.        ,
           0.        ],
         [ 0.10128651,  0.79742699,  0.10128651,  0.        ,  0.        ,
           0.        ],
         [ 0.10128651,  0.10128651,  0.79742699,  0.        ,  0.        ,
           0.        ],
         [ 0.79742699,  0.10128651,  0.10128651,  0.        ,  0.        ,
           0.        ],
         [ 0.47014206,  0.05971587,  0.47014206,  0.        ,  0.        ,
           0.        ],
         [ 0.47014206,  0.47014206,  0.05971587,  0.        ,  0.        ,
           0.        ],
         [ 0.05971587,  0.47014206,  0.47014206,  0.        ,  0.        ,
           0.        ]]), 'FE3_C1': array([[ 0.        ,  0.        ,  0.        ,  0.33333333,  0.33333333,
           0.33333333],
         [ 0.        ,  0.        ,  0.        ,  0.10128651,  0.79742699,
           0.10128651],
         [ 0.        ,  0.        ,  0.        ,  0.10128651,  0.10128651,
           0.79742699],
         [ 0.        ,  0.        ,  0.        ,  0.79742699,  0.10128651,
           0.10128651],
         [ 0.        ,  0.        ,  0.        ,  0.47014206,  0.05971587,
           0.47014206],
         [ 0.        ,  0.        ,  0.        ,  0.47014206,  0.47014206,
           0.05971587],
         [ 0.        ,  0.        ,  0.        ,  0.05971587,  0.47014206,
           0.47014206]]), 'FE3_C0_D10': array([[-1.,  1.,  0.,  0.,  0.,  0.],
         [-1.,  1.,  0.,  0.,  0.,  0.],
         [-1.,  1.,  0.,  0.,  0.,  0.],
         [-1.,  1.,  0.,  0.,  0.,  0.],
         [-1.,  1.,  0.,  0.,  0.,  0.],
         [-1.,  1.,  0.,  0.,  0.,  0.],
         [-1.,  1.,  0.,  0.,  0.,  0.]]), 'FE1_D01': array([[ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00]]), 'FE1_D10': array([[-1.,  1.,  0.],
         [-1.,  1.,  0.],
         [-1.,  1.,  0.],
         [-1.,  1.,  0.],
         [-1.,  1.,  0.],
         [-1.,  1.,  0.],
         [-1.,  1.,  0.]]), 'FE0': array([[ 1.        ],
         [ 0.22088076],
         [ 0.22088076],
         [ 0.22088076],
         [ 0.35637872],
         [ 0.35637872],
         [ 0.35637872]]), 'FE1': array([[ 0.33333333,  0.33333333,  0.33333333],
         [ 0.10128651,  0.79742699,  0.10128651],
         [ 0.10128651,  0.10128651,  0.79742699],
         [ 0.79742699,  0.10128651,  0.10128651],
         [ 0.47014206,  0.05971587,  0.47014206],
         [ 0.47014206,  0.47014206,  0.05971587],
         [ 0.05971587,  0.47014206,  0.47014206]]), 'FE3_C1_D10': array([[ 0.,  0.,  0., -1.,  1.,  0.],
         [ 0.,  0.,  0., -1.,  1.,  0.],
         [ 0.,  0.,  0., -1.,  1.,  0.],
         [ 0.,  0.,  0., -1.,  1.,  0.],
         [ 0.,  0.,  0., -1.,  1.,  0.],
         [ 0.,  0.,  0., -1.,  1.,  0.],
         [ 0.,  0.,  0., -1.,  1.,  0.]])}
  
  name_map: {'FE1_D01': ['FE2_D01'], 'FE1_D10': ['FE2_D10'], 'FE1': ['FE2']}
  
  inv_name_map: {'FE0_D10': 'FE0_D10', 'FE0_D01': 'FE0_D01', 'FE0': 'FE0', 'FE3_C1_D01': 'FE3_C1_D01', 'FE3_C0': 'FE3_C0', 'FE3_C1': 'FE3_C1', 'FE3_C0_D10': 'FE3_C0_D10', 'FE1_D01': 'FE1_D01', 'FE2': 'FE1', 'FE1_D10': 'FE1_D10', 'FE3_C0_D01': 'FE3_C0_D01', 'FE1': 'FE1', 'FE2_D10': 'FE1_D10', 'FE2_D01': 'FE1_D01', 'FE3_C1_D10': 'FE3_C1_D10'}
  
  QG-utils, psi_tables, unique_tables:
  {'FE0_D10': array([[ 0.        ],
         [-1.90376022],
         [ 0.        ],
         [ 1.90376022],
         [ 5.20988266],
         [ 0.        ],
         [-5.20988266]]), 'FE0_D01': array([[ 0.        ],
         [ 0.        ],
         [-1.90376022],
         [ 1.90376022],
         [ 0.        ],
         [ 5.20988266],
         [-5.20988266]]), 'FE1_D01': array([[-1.,  1.],
         [-1.,  1.],
         [-1.,  1.],
         [-1.,  1.],
         [-1.,  1.],
         [-1.,  1.],
         [-1.,  1.]]), 'FE0': array([[ 1.        ],
         [ 0.22088076],
         [ 0.22088076],
         [ 0.22088076],
         [ 0.35637872],
         [ 0.35637872],
         [ 0.35637872]]), 'FE1': array([[ 0.33333333,  0.33333333,  0.33333333],
         [ 0.10128651,  0.79742699,  0.10128651],
         [ 0.10128651,  0.10128651,  0.79742699],
         [ 0.79742699,  0.10128651,  0.10128651],
         [ 0.47014206,  0.05971587,  0.47014206],
         [ 0.47014206,  0.47014206,  0.05971587],
         [ 0.05971587,  0.47014206,  0.47014206]])}
  
  QG-utils, psi_tables, name_map:
  {'FE0_D10': ('FE0_D10', (), False, False), 'FE0_D01': ('FE0_D01', (), False, False), 'FE0': ('FE0', (), False, False), 'FE3_C1_D01': ('FE1_D01', (6, [3, 5]), False, False), 'FE3_C0': ('FE1', (2, [0, 1, 2]), False, False), 'FE3_C1': ('FE1', (5, [3, 4, 5]), False, False), 'FE3_C0_D10': ('FE1_D01', (4, [0, 1]), False, False), 'FE1_D01': ('FE1_D01', (0, [0, 2]), False, False), 'FE2': ('FE1', (), False, False), 'FE1_D10': ('FE1_D01', (1, [0, 1]), False, False), 'FE3_C0_D01': ('FE1_D01', (3, [0, 2]), False, False), 'FE1': ('FE1', (), False, False), 'FE2_D10': ('FE1_D01', (1, [0, 1]), False, False), 'FE2_D01': ('FE1_D01', (0, [0, 2]), False, False), 'FE3_C1_D10': ('FE1_D01', (7, [3, 4]), False, False)}
  Transforming cell integral
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00204 seconds
  Shape of reference tensor: (3, 3, 1)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 2 dims = [3, 1] indices = [[0, 0], [1, 0], [2, 0]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 1] indices = [[0, 0], [1, 0], [2, 0]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00194 seconds
  Shape of reference tensor: (3, 3, 1)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 2 dims = [3, 1] indices = [[0, 0], [1, 0], [2, 0]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 1] indices = [[0, 0], [1, 0], [2, 0]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00192 seconds
  Shape of reference tensor: (3, 3, 1)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 2 dims = [3, 1] indices = [[0, 0], [1, 0], [2, 0]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 1] indices = [[0, 0], [1, 0], [2, 0]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00153 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00151 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00151 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Reusing element from cache
  Reusing element from cache
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00207 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00208 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00212 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00206 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00213 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00208 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00206 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00211 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.0021 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00209 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00265 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00206 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00201 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00198 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00199 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00199 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00198 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00198 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Reusing element from cache
  Reusing element from cache
  Computing quadrature representation
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  
  QG-utils, psi_tables:
  {6: {FiniteElement('Discontinuous Lagrange', Domain(Cell('triangle', 2), label=None, data=None), 2, quad_scheme=None): {None: {None: {(0, 1): array([[  6.33695146e-01,   6.33695146e-01,  -2.26739029e+00,
           -7.83793964e-01,  -7.83793964e-01,   5.67587927e-01],
         [  8.77076189e-15,   8.32667268e-15,   5.88418203e-15,
            6.94583280e-15,   7.04991621e-15,   8.22952817e-15],
         [ -6.33695146e-01,   2.26739029e+00,  -6.33695146e-01,
            7.83793964e-01,  -5.67587927e-01,   7.83793964e-01],
         [  3.26739029e+00,   3.66304854e-01,   3.66304854e-01,
            4.32412073e-01,   1.78379396e+00,   1.78379396e+00],
         [  8.43769499e-15,  -2.90108544e+00,   2.90108544e+00,
            8.18789481e-15,   1.35138189e+00,  -1.35138189e+00],
         [ -3.26739029e+00,  -3.66304854e-01,  -3.66304854e-01,
           -4.32412073e-01,  -1.78379396e+00,  -1.78379396e+00]]), (1, 0): array([[  6.33695146e-01,   6.33695146e-01,  -2.26739029e+00,
           -7.83793964e-01,  -7.83793964e-01,   5.67587927e-01],
         [  2.26739029e+00,  -6.33695146e-01,  -6.33695146e-01,
           -5.67587927e-01,   7.83793964e-01,   7.83793964e-01],
         [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
            0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
         [  3.66304854e-01,   3.26739029e+00,   3.66304854e-01,
            1.78379396e+00,   4.32412073e-01,   1.78379396e+00],
         [ -3.66304854e-01,  -3.26739029e+00,  -3.66304854e-01,
           -1.78379396e+00,  -4.32412073e-01,  -1.78379396e+00],
         [ -2.90108544e+00,  -2.42787315e-15,   2.90108544e+00,
            1.35138189e+00,   2.02557929e-16,  -1.35138189e+00]]), (0, 0): array([[-0.07480381, -0.07480381,  0.51763234, -0.04820838, -0.04820838,
          -0.08473049],
         [ 0.51763234, -0.07480381, -0.07480381, -0.08473049, -0.04820838,
          -0.04820838],
         [-0.07480381,  0.51763234, -0.07480381, -0.04820838, -0.08473049,
          -0.04820838],
         [ 0.29921523,  0.29921523,  0.03354481,  0.19283351,  0.19283351,
           0.79548023],
         [ 0.03354481,  0.29921523,  0.29921523,  0.79548023,  0.19283351,
           0.19283351],
         [ 0.29921523,  0.03354481,  0.29921523,  0.19283351,  0.79548023,
           0.19283351]])}}}, FiniteElement('Discontinuous Lagrange', Domain(Cell('triangle', 2), label=None, data=None), 1, quad_scheme=None): {None: {None: {(0, 1): array([[ -1.00000000e+00,  -1.00000000e+00,  -1.00000000e+00,
           -1.00000000e+00,  -1.00000000e+00,  -1.00000000e+00],
         [  8.88178420e-16,   8.88178420e-16,   8.88178420e-16,
            8.88178420e-16,   8.88178420e-16,   8.88178420e-16],
         [  1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
            1.00000000e+00,   1.00000000e+00,   1.00000000e+00]]), (1, 0): array([[-1., -1., -1., -1., -1., -1.],
         [ 1.,  1.,  1.,  1.,  1.,  1.],
         [ 0.,  0.,  0.,  0.,  0.,  0.]]), (0, 0): array([[ 0.09157621,  0.09157621,  0.81684757,  0.44594849,  0.44594849,
           0.10810302],
         [ 0.81684757,  0.09157621,  0.09157621,  0.10810302,  0.44594849,
           0.44594849],
         [ 0.09157621,  0.81684757,  0.09157621,  0.44594849,  0.10810302,
           0.44594849]])}}}, FiniteElement('Lagrange', Domain(Cell('triangle', 2), label=None, data=None), 1, quad_scheme=None): {None: {None: {(0, 1): array([[ -1.00000000e+00,  -1.00000000e+00,  -1.00000000e+00,
           -1.00000000e+00,  -1.00000000e+00,  -1.00000000e+00],
         [  8.88178420e-16,   8.88178420e-16,   8.88178420e-16,
            8.88178420e-16,   8.88178420e-16,   8.88178420e-16],
         [  1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
            1.00000000e+00,   1.00000000e+00,   1.00000000e+00]]), (1, 0): array([[-1., -1., -1., -1., -1., -1.],
         [ 1.,  1.,  1.,  1.,  1.,  1.],
         [ 0.,  0.,  0.,  0.,  0.,  0.]]), (0, 0): array([[ 0.09157621,  0.09157621,  0.81684757,  0.44594849,  0.44594849,
           0.10810302],
         [ 0.81684757,  0.09157621,  0.09157621,  0.10810302,  0.44594849,
           0.44594849],
         [ 0.09157621,  0.81684757,  0.09157621,  0.44594849,  0.10810302,
           0.44594849]])}}}, VectorElement('Lagrange', Domain(Cell('triangle', 2), label=None, data=None), 1, dim=2, quad_scheme=None): {None: {None: {(0, 1): array([[[ -1.00000000e+00,  -1.00000000e+00,  -1.00000000e+00,
            -1.00000000e+00,  -1.00000000e+00,  -1.00000000e+00],
          [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
             0.00000000e+00,   0.00000000e+00,   0.00000000e+00]],
  
         [[  8.88178420e-16,   8.88178420e-16,   8.88178420e-16,
             8.88178420e-16,   8.88178420e-16,   8.88178420e-16],
          [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
             0.00000000e+00,   0.00000000e+00,   0.00000000e+00]],
  
         [[  1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
             1.00000000e+00,   1.00000000e+00,   1.00000000e+00],
          [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
             0.00000000e+00,   0.00000000e+00,   0.00000000e+00]],
  
         [[  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
             0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
          [ -1.00000000e+00,  -1.00000000e+00,  -1.00000000e+00,
            -1.00000000e+00,  -1.00000000e+00,  -1.00000000e+00]],
  
         [[  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
             0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
          [  8.88178420e-16,   8.88178420e-16,   8.88178420e-16,
             8.88178420e-16,   8.88178420e-16,   8.88178420e-16]],
  
         [[  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
             0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
          [  1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
             1.00000000e+00,   1.00000000e+00,   1.00000000e+00]]]), (1, 0): array([[[-1., -1., -1., -1., -1., -1.],
          [ 0.,  0.,  0.,  0.,  0.,  0.]],
  
         [[ 1.,  1.,  1.,  1.,  1.,  1.],
          [ 0.,  0.,  0.,  0.,  0.,  0.]],
  
         [[ 0.,  0.,  0.,  0.,  0.,  0.],
          [ 0.,  0.,  0.,  0.,  0.,  0.]],
  
         [[ 0.,  0.,  0.,  0.,  0.,  0.],
          [-1., -1., -1., -1., -1., -1.]],
  
         [[ 0.,  0.,  0.,  0.,  0.,  0.],
          [ 1.,  1.,  1.,  1.,  1.,  1.]],
  
         [[ 0.,  0.,  0.,  0.,  0.,  0.],
          [ 0.,  0.,  0.,  0.,  0.,  0.]]]), (0, 0): array([[[ 0.09157621,  0.09157621,  0.81684757,  0.44594849,  0.44594849,
            0.10810302],
          [ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
            0.        ]],
  
         [[ 0.81684757,  0.09157621,  0.09157621,  0.10810302,  0.44594849,
            0.44594849],
          [ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
            0.        ]],
  
         [[ 0.09157621,  0.81684757,  0.09157621,  0.44594849,  0.10810302,
            0.44594849],
          [ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
            0.        ]],
  
         [[ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
            0.        ],
          [ 0.09157621,  0.09157621,  0.81684757,  0.44594849,  0.44594849,
            0.10810302]],
  
         [[ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
            0.        ],
          [ 0.81684757,  0.09157621,  0.09157621,  0.10810302,  0.44594849,
            0.44594849]],
  
         [[ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,
            0.        ],
          [ 0.09157621,  0.81684757,  0.09157621,  0.44594849,  0.10810302,
            0.44594849]]])}}}}}
  
  QG-utils, psi_tables, flat_tables:
  {'FE0_D10': array([[-1.,  1.,  0.],
         [-1.,  1.,  0.],
         [-1.,  1.,  0.],
         [-1.,  1.,  0.],
         [-1.,  1.,  0.],
         [-1.,  1.,  0.]]), 'FE0_D01': array([[ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00]]), 'FE3_C0_D01': array([[ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00,
            0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00,
            0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00,
            0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00,
            0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00,
            0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00,
            0.00000000e+00,   0.00000000e+00,   0.00000000e+00]]), 'FE3_C1_D01': array([[  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
           -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
           -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
           -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
           -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
           -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
           -1.00000000e+00,   8.88178420e-16,   1.00000000e+00]]), 'FE3_C0': array([[ 0.09157621,  0.81684757,  0.09157621,  0.        ,  0.        ,
           0.        ],
         [ 0.09157621,  0.09157621,  0.81684757,  0.        ,  0.        ,
           0.        ],
         [ 0.81684757,  0.09157621,  0.09157621,  0.        ,  0.        ,
           0.        ],
         [ 0.44594849,  0.10810302,  0.44594849,  0.        ,  0.        ,
           0.        ],
         [ 0.44594849,  0.44594849,  0.10810302,  0.        ,  0.        ,
           0.        ],
         [ 0.10810302,  0.44594849,  0.44594849,  0.        ,  0.        ,
           0.        ]]), 'FE3_C1': array([[ 0.        ,  0.        ,  0.        ,  0.09157621,  0.81684757,
           0.09157621],
         [ 0.        ,  0.        ,  0.        ,  0.09157621,  0.09157621,
           0.81684757],
         [ 0.        ,  0.        ,  0.        ,  0.81684757,  0.09157621,
           0.09157621],
         [ 0.        ,  0.        ,  0.        ,  0.44594849,  0.10810302,
           0.44594849],
         [ 0.        ,  0.        ,  0.        ,  0.44594849,  0.44594849,
           0.10810302],
         [ 0.        ,  0.        ,  0.        ,  0.10810302,  0.44594849,
           0.44594849]]), 'FE3_C0_D10': array([[-1.,  1.,  0.,  0.,  0.,  0.],
         [-1.,  1.,  0.,  0.,  0.,  0.],
         [-1.,  1.,  0.,  0.,  0.,  0.],
         [-1.,  1.,  0.,  0.,  0.,  0.],
         [-1.,  1.,  0.,  0.,  0.,  0.],
         [-1.,  1.,  0.,  0.,  0.,  0.]]), 'FE1_D01': array([[ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00]]), 'FE2': array([[-0.07480381,  0.51763234, -0.07480381,  0.29921523,  0.03354481,
           0.29921523],
         [-0.07480381, -0.07480381,  0.51763234,  0.29921523,  0.29921523,
           0.03354481],
         [ 0.51763234, -0.07480381, -0.07480381,  0.03354481,  0.29921523,
           0.29921523],
         [-0.04820838, -0.08473049, -0.04820838,  0.19283351,  0.79548023,
           0.19283351],
         [-0.04820838, -0.04820838, -0.08473049,  0.19283351,  0.19283351,
           0.79548023],
         [-0.08473049, -0.04820838, -0.04820838,  0.79548023,  0.19283351,
           0.19283351]]), 'FE1_D10': array([[-1.,  1.,  0.],
         [-1.,  1.,  0.],
         [-1.,  1.,  0.],
         [-1.,  1.,  0.],
         [-1.,  1.,  0.],
         [-1.,  1.,  0.]]), 'FE0': array([[ 0.09157621,  0.81684757,  0.09157621],
         [ 0.09157621,  0.09157621,  0.81684757],
         [ 0.81684757,  0.09157621,  0.09157621],
         [ 0.44594849,  0.10810302,  0.44594849],
         [ 0.44594849,  0.44594849,  0.10810302],
         [ 0.10810302,  0.44594849,  0.44594849]]), 'FE1': array([[ 0.09157621,  0.81684757,  0.09157621],
         [ 0.09157621,  0.09157621,  0.81684757],
         [ 0.81684757,  0.09157621,  0.09157621],
         [ 0.44594849,  0.10810302,  0.44594849],
         [ 0.44594849,  0.44594849,  0.10810302],
         [ 0.10810302,  0.44594849,  0.44594849]]), 'FE2_D10': array([[  6.33695146e-01,   2.26739029e+00,   0.00000000e+00,
            3.66304854e-01,  -3.66304854e-01,  -2.90108544e+00],
         [  6.33695146e-01,  -6.33695146e-01,   0.00000000e+00,
            3.26739029e+00,  -3.26739029e+00,  -2.42787315e-15],
         [ -2.26739029e+00,  -6.33695146e-01,   0.00000000e+00,
            3.66304854e-01,  -3.66304854e-01,   2.90108544e+00],
         [ -7.83793964e-01,  -5.67587927e-01,   0.00000000e+00,
            1.78379396e+00,  -1.78379396e+00,   1.35138189e+00],
         [ -7.83793964e-01,   7.83793964e-01,   0.00000000e+00,
            4.32412073e-01,  -4.32412073e-01,   2.02557929e-16],
         [  5.67587927e-01,   7.83793964e-01,   0.00000000e+00,
            1.78379396e+00,  -1.78379396e+00,  -1.35138189e+00]]), 'FE2_D01': array([[  6.33695146e-01,   8.77076189e-15,  -6.33695146e-01,
            3.26739029e+00,   8.43769499e-15,  -3.26739029e+00],
         [  6.33695146e-01,   8.32667268e-15,   2.26739029e+00,
            3.66304854e-01,  -2.90108544e+00,  -3.66304854e-01],
         [ -2.26739029e+00,   5.88418203e-15,  -6.33695146e-01,
            3.66304854e-01,   2.90108544e+00,  -3.66304854e-01],
         [ -7.83793964e-01,   6.94583280e-15,   7.83793964e-01,
            4.32412073e-01,   8.18789481e-15,  -4.32412073e-01],
         [ -7.83793964e-01,   7.04991621e-15,  -5.67587927e-01,
            1.78379396e+00,   1.35138189e+00,  -1.78379396e+00],
         [  5.67587927e-01,   8.22952817e-15,   7.83793964e-01,
            1.78379396e+00,  -1.35138189e+00,  -1.78379396e+00]]), 'FE3_C1_D10': array([[ 0.,  0.,  0., -1.,  1.,  0.],
         [ 0.,  0.,  0., -1.,  1.,  0.],
         [ 0.,  0.,  0., -1.,  1.,  0.],
         [ 0.,  0.,  0., -1.,  1.,  0.],
         [ 0.,  0.,  0., -1.,  1.,  0.],
         [ 0.,  0.,  0., -1.,  1.,  0.]])}
  
  tables: {'FE0_D10': array([[-1.,  1.,  0.],
         [-1.,  1.,  0.],
         [-1.,  1.,  0.],
         [-1.,  1.,  0.],
         [-1.,  1.,  0.],
         [-1.,  1.,  0.]]), 'FE0_D01': array([[ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00]]), 'FE3_C0_D01': array([[ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00,
            0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00,
            0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00,
            0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00,
            0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00,
            0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
         [ -1.00000000e+00,   8.88178420e-16,   1.00000000e+00,
            0.00000000e+00,   0.00000000e+00,   0.00000000e+00]]), 'FE3_C1_D01': array([[  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
           -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
           -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
           -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
           -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
           -1.00000000e+00,   8.88178420e-16,   1.00000000e+00],
         [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
           -1.00000000e+00,   8.88178420e-16,   1.00000000e+00]]), 'FE3_C0': array([[ 0.09157621,  0.81684757,  0.09157621,  0.        ,  0.        ,
           0.        ],
         [ 0.09157621,  0.09157621,  0.81684757,  0.        ,  0.        ,
           0.        ],
         [ 0.81684757,  0.09157621,  0.09157621,  0.        ,  0.        ,
           0.        ],
         [ 0.44594849,  0.10810302,  0.44594849,  0.        ,  0.        ,
           0.        ],
         [ 0.44594849,  0.44594849,  0.10810302,  0.        ,  0.        ,
           0.        ],
         [ 0.10810302,  0.44594849,  0.44594849,  0.        ,  0.        ,
           0.        ]]), 'FE3_C1': array([[ 0.        ,  0.        ,  0.        ,  0.09157621,  0.81684757,
           0.09157621],
         [ 0.        ,  0.        ,  0.        ,  0.09157621,  0.09157621,
           0.81684757],
         [ 0.        ,  0.        ,  0.        ,  0.81684757,  0.09157621,
           0.09157621],
         [ 0.        ,  0.        ,  0.        ,  0.44594849,  0.10810302,
           0.44594849],
         [ 0.        ,  0.        ,  0.        ,  0.44594849,  0.44594849,
           0.10810302],
         [ 0.        ,  0.        ,  0.        ,  0.10810302,  0.44594849,
           0.44594849]]), 'FE3_C0_D10': array([[-1.,  1.,  0.,  0.,  0.,  0.],
         [-1.,  1.,  0.,  0.,  0.,  0.],
         [-1.,  1.,  0.,  0.,  0.,  0.],
         [-1.,  1.,  0.,  0.,  0.,  0.],
         [-1.,  1.,  0.,  0.,  0.,  0.],
         [-1.,  1.,  0.,  0.,  0.,  0.]]), 'FE2': array([[-0.07480381,  0.51763234, -0.07480381,  0.29921523,  0.03354481,
           0.29921523],
         [-0.07480381, -0.07480381,  0.51763234,  0.29921523,  0.29921523,
           0.03354481],
         [ 0.51763234, -0.07480381, -0.07480381,  0.03354481,  0.29921523,
           0.29921523],
         [-0.04820838, -0.08473049, -0.04820838,  0.19283351,  0.79548023,
           0.19283351],
         [-0.04820838, -0.04820838, -0.08473049,  0.19283351,  0.19283351,
           0.79548023],
         [-0.08473049, -0.04820838, -0.04820838,  0.79548023,  0.19283351,
           0.19283351]]), 'FE0': array([[ 0.09157621,  0.81684757,  0.09157621],
         [ 0.09157621,  0.09157621,  0.81684757],
         [ 0.81684757,  0.09157621,  0.09157621],
         [ 0.44594849,  0.10810302,  0.44594849],
         [ 0.44594849,  0.44594849,  0.10810302],
         [ 0.10810302,  0.44594849,  0.44594849]]), 'FE2_D10': array([[  6.33695146e-01,   2.26739029e+00,   0.00000000e+00,
            3.66304854e-01,  -3.66304854e-01,  -2.90108544e+00],
         [  6.33695146e-01,  -6.33695146e-01,   0.00000000e+00,
            3.26739029e+00,  -3.26739029e+00,  -2.42787315e-15],
         [ -2.26739029e+00,  -6.33695146e-01,   0.00000000e+00,
            3.66304854e-01,  -3.66304854e-01,   2.90108544e+00],
         [ -7.83793964e-01,  -5.67587927e-01,   0.00000000e+00,
            1.78379396e+00,  -1.78379396e+00,   1.35138189e+00],
         [ -7.83793964e-01,   7.83793964e-01,   0.00000000e+00,
            4.32412073e-01,  -4.32412073e-01,   2.02557929e-16],
         [  5.67587927e-01,   7.83793964e-01,   0.00000000e+00,
            1.78379396e+00,  -1.78379396e+00,  -1.35138189e+00]]), 'FE2_D01': array([[  6.33695146e-01,   8.77076189e-15,  -6.33695146e-01,
            3.26739029e+00,   8.43769499e-15,  -3.26739029e+00],
         [  6.33695146e-01,   8.32667268e-15,   2.26739029e+00,
            3.66304854e-01,  -2.90108544e+00,  -3.66304854e-01],
         [ -2.26739029e+00,   5.88418203e-15,  -6.33695146e-01,
            3.66304854e-01,   2.90108544e+00,  -3.66304854e-01],
         [ -7.83793964e-01,   6.94583280e-15,   7.83793964e-01,
            4.32412073e-01,   8.18789481e-15,  -4.32412073e-01],
         [ -7.83793964e-01,   7.04991621e-15,  -5.67587927e-01,
            1.78379396e+00,   1.35138189e+00,  -1.78379396e+00],
         [  5.67587927e-01,   8.22952817e-15,   7.83793964e-01,
            1.78379396e+00,  -1.35138189e+00,  -1.78379396e+00]]), 'FE3_C1_D10': array([[ 0.,  0.,  0., -1.,  1.,  0.],
         [ 0.,  0.,  0., -1.,  1.,  0.],
         [ 0.,  0.,  0., -1.,  1.,  0.],
         [ 0.,  0.,  0., -1.,  1.,  0.],
         [ 0.,  0.,  0., -1.,  1.,  0.],
         [ 0.,  0.,  0., -1.,  1.,  0.]])}
  
  name_map: {'FE0_D10': ['FE1_D10'], 'FE0_D01': ['FE1_D01'], 'FE0': ['FE1']}
  
  inv_name_map: {'FE0_D10': 'FE0_D10', 'FE0_D01': 'FE0_D01', 'FE0': 'FE0', 'FE3_C1_D01': 'FE3_C1_D01', 'FE3_C0': 'FE3_C0', 'FE3_C1': 'FE3_C1', 'FE3_C0_D10': 'FE3_C0_D10', 'FE1_D01': 'FE0_D01', 'FE2': 'FE2', 'FE1_D10': 'FE0_D10', 'FE3_C0_D01': 'FE3_C0_D01', 'FE1': 'FE0', 'FE2_D10': 'FE2_D10', 'FE2_D01': 'FE2_D01', 'FE3_C1_D10': 'FE3_C1_D10'}
  
  QG-utils, psi_tables, unique_tables:
  {'FE0_D01': array([[-1.,  1.],
         [-1.,  1.],
         [-1.,  1.],
         [-1.,  1.],
         [-1.,  1.],
         [-1.,  1.]]), 'FE2': array([[-0.07480381,  0.51763234, -0.07480381,  0.29921523,  0.03354481,
           0.29921523],
         [-0.07480381, -0.07480381,  0.51763234,  0.29921523,  0.29921523,
           0.03354481],
         [ 0.51763234, -0.07480381, -0.07480381,  0.03354481,  0.29921523,
           0.29921523],
         [-0.04820838, -0.08473049, -0.04820838,  0.19283351,  0.79548023,
           0.19283351],
         [-0.04820838, -0.04820838, -0.08473049,  0.19283351,  0.19283351,
           0.79548023],
         [-0.08473049, -0.04820838, -0.04820838,  0.79548023,  0.19283351,
           0.19283351]]), 'FE0': array([[ 0.09157621,  0.81684757,  0.09157621],
         [ 0.09157621,  0.09157621,  0.81684757],
         [ 0.81684757,  0.09157621,  0.09157621],
         [ 0.44594849,  0.10810302,  0.44594849],
         [ 0.44594849,  0.44594849,  0.10810302],
         [ 0.10810302,  0.44594849,  0.44594849]]), 'FE2_D10': array([[ 0.63369515,  2.26739029,  0.36630485, -0.36630485, -2.90108544],
         [ 0.63369515, -0.63369515,  3.26739029, -3.26739029,  0.        ],
         [-2.26739029, -0.63369515,  0.36630485, -0.36630485,  2.90108544],
         [-0.78379396, -0.56758793,  1.78379396, -1.78379396,  1.35138189],
         [-0.78379396,  0.78379396,  0.43241207, -0.43241207,  0.        ],
         [ 0.56758793,  0.78379396,  1.78379396, -1.78379396, -1.35138189]]), 'FE2_D01': array([[ 0.63369515, -0.63369515,  3.26739029,  0.        , -3.26739029],
         [ 0.63369515,  2.26739029,  0.36630485, -2.90108544, -0.36630485],
         [-2.26739029, -0.63369515,  0.36630485,  2.90108544, -0.36630485],
         [-0.78379396,  0.78379396,  0.43241207,  0.        , -0.43241207],
         [-0.78379396, -0.56758793,  1.78379396,  1.35138189, -1.78379396],
         [ 0.56758793,  0.78379396,  1.78379396, -1.35138189, -1.78379396]])}
  
  QG-utils, psi_tables, name_map:
  {'FE0_D10': ('FE0_D01', (1, [0, 1]), False, False), 'FE0_D01': ('FE0_D01', (0, [0, 2]), False, False), 'FE0': ('FE0', (), False, False), 'FE3_C1_D01': ('FE0_D01', (8, [3, 5]), False, False), 'FE3_C0': ('FE0', (4, [0, 1, 2]), False, False), 'FE3_C1': ('FE0', (7, [3, 4, 5]), False, False), 'FE3_C0_D10': ('FE0_D01', (6, [0, 1]), False, False), 'FE1_D01': ('FE0_D01', (0, [0, 2]), False, False), 'FE2': ('FE2', (), False, False), 'FE1_D10': ('FE0_D01', (1, [0, 1]), False, False), 'FE3_C0_D01': ('FE0_D01', (5, [0, 2]), False, False), 'FE1': ('FE0', (), False, False), 'FE2_D10': ('FE2_D10', (3, [0, 1, 3, 4, 5]), False, False), 'FE2_D01': ('FE2_D01', (2, [0, 2, 3, 4, 5]), False, False), 'FE3_C1_D10': ('FE0_D01', (9, [3, 4]), False, False)}
  Transforming cell integral
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00191 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00185 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00183 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00127 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00119 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00156 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00149 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00156 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00149 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00155 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00149 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00213 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00209 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00216 seconds
  Shape of reference tensor: (1, 6, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00212 seconds
  Shape of reference tensor: (1, 6, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00199 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00202 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00212 seconds
  Shape of reference tensor: (1, 6, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00213 seconds
  Shape of reference tensor: (1, 6, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00201 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.002 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00212 seconds
  Shape of reference tensor: (1, 6, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00216 seconds
  Shape of reference tensor: (1, 6, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00202 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00206 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.0022 seconds
  Shape of reference tensor: (1, 6, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00221 seconds
  Shape of reference tensor: (1, 6, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00209 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.0021 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00222 seconds
  Shape of reference tensor: (1, 6, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00222 seconds
  Shape of reference tensor: (1, 6, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00211 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00209 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00221 seconds
  Shape of reference tensor: (1, 6, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00221 seconds
  Shape of reference tensor: (1, 6, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.0021 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00211 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00223 seconds
  Shape of reference tensor: (1, 6, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00221 seconds
  Shape of reference tensor: (1, 6, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00209 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.0021 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.0022 seconds
  Shape of reference tensor: (1, 6, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.0022 seconds
  Shape of reference tensor: (1, 6, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00211 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.0021 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.0022 seconds
  Shape of reference tensor: (1, 6, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.0022 seconds
  Shape of reference tensor: (1, 6, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00209 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00199 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00212 seconds
  Shape of reference tensor: (1, 6, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00214 seconds
  Shape of reference tensor: (1, 6, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00201 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00201 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00214 seconds
  Shape of reference tensor: (1, 6, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00213 seconds
  Shape of reference tensor: (1, 6, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00202 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00202 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00214 seconds
  Shape of reference tensor: (1, 6, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00209 seconds
  Shape of reference tensor: (1, 6, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00208 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00204 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00206 seconds
  Shape of reference tensor: (1, 6, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00212 seconds
  Shape of reference tensor: (1, 6, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00204 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00203 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00213 seconds
  Shape of reference tensor: (1, 6, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00215 seconds
  Shape of reference tensor: (1, 6, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00201 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00202 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00213 seconds
  Shape of reference tensor: (1, 6, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00214 seconds
  Shape of reference tensor: (1, 6, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00203 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00201 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00212 seconds
  Shape of reference tensor: (1, 6, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00212 seconds
  Shape of reference tensor: (1, 6, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00205 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00211 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00221 seconds
  Shape of reference tensor: (1, 6, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00223 seconds
  Shape of reference tensor: (1, 6, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.0021 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00209 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00221 seconds
  Shape of reference tensor: (1, 6, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00223 seconds
  Shape of reference tensor: (1, 6, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [6, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  36 entries computed in 0.000647 seconds
  Shape of reference tensor: (3, 3, 2, 2)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 2 dims = [2, 2] indices = [[0, 0], [0, 1], [1, 0], [1, 1]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [2, 2] indices = [[0, 0], [0, 1], [1, 0], [1, 1]]
  External multi index:  rank = 1 dims = [2] indices = [[0], [1]]
  Reusing element from cache
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  9 entries computed in 0.000589 seconds
  Shape of reference tensor: (3, 3)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Reusing element from cache
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  9 entries computed in 0.000883 seconds
  Shape of reference tensor: (3, 3)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  9 entries computed in 0.000842 seconds
  Shape of reference tensor: (3, 3)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  9 entries computed in 0.00088 seconds
  Shape of reference tensor: (3, 3)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Reusing element from cache
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  3 entries computed in 0.000458 seconds
  Shape of reference tensor: (3,)
  Primary multi index:   rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Reusing element from cache
  Computing representation of forms
  
Compiler stage 2 finished in 0.505273 seconds.

Compiler stage 3: Optimizing intermediate representation
--------------------------------------------------------
  Optimising expressions for cell integral
  Optimising expressions for cell integral
  Optimising expressions for cell integral
  
Compiler stage 3 finished in 0.0111051 seconds.

Compiler stage 4: Generating code
---------------------------------
  Generating code for 6 element(s)
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp0
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: Y
  Removing unused variable: X
  Removing unused variable: C1
  Removing unused variable: C0
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Generating code for 6 dofmap(s)
  Generating code for integrals
  Removing unused variable: circumradius
  Removing unused variable: v0v1
  Removing unused variable: v0v2
  Removing unused variable: v1v2
  Removing unused variable: volume
  Removing unused variable: circumradius
  Removing unused variable: v0v1
  Removing unused variable: v0v2
  Removing unused variable: v1v2
  Removing unused variable: volume
  Removing unused variable: det
  Removing unused variable: dx1
  Removing unused variable: dx0
  Removing unused variable: v1
  Removing unused variable: v0
  Removing unused variable: edge_vertices
  Removing unused variable: circumradius
  Removing unused variable: v0v1
  Removing unused variable: v0v2
  Removing unused variable: v1v2
  Removing unused variable: volume
  Generating code for forms
  
Compiler stage 4 finished in 0.313285 seconds.

Compiler stage 4.1: Generating additional wrapper code
------------------------------------------------------
  Generating wrapper code for DOLFIN
  
Compiler stage 4.1 finished in 0.00241518 seconds.

Compiler stage 5: Formatting code
---------------------------------
  
Output written to ./AdaptivePoisson.h.
Compiler stage 5 finished in 0.00157809 seconds.

[1;37;32mFFC finished in 1.2299 seconds.[0m
