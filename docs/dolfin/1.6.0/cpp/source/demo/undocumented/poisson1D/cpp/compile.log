This is FFC, the FEniCS Form Compiler, version 1.6.0.
For further information, visit http://www.fenics.org/ffc/.

Compiling form Poisson

Compiler stage 1: Analyzing form(s)
-----------------------------------
  
  Geometric dimension:       1
  Number of cell subdomains: 0
  Rank:                      2
  Arguments:                 '(v_0, v_1)'
  Number of coefficients:    0
  Coefficients:              '[]'
  Unique elements:           'CG1(?)'
  Unique sub elements:       'CG1(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Estimated cost of tensor representation: 2
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 0
  quadrature_degree: auto --> 0
  quadrature_rule:   auto --> default
  
  Geometric dimension:                 1
  Number of cell subdomains:           0
  Number of exterior_facet subdomains: 0
  Rank:                                1
  Arguments:                           '(v_0)'
  Number of coefficients:              2
  Coefficients:                        '[w_0, w_1]'
  Unique elements:                     'CG1(?)'
  Unique sub elements:                 'CG1(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 1
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 2
  quadrature_degree: auto --> 2
  quadrature_rule:   auto --> default
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 1
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 2
  quadrature_degree: auto --> 2
  quadrature_rule:   auto --> default
  
Compiler stage 1 finished in 0.0179989 seconds.

Compiler stage 2: Computing intermediate representation
-------------------------------------------------------
  Computing representation of 1 elements
  Reusing element from cache
  Reusing element from cache
  Computing representation of 1 dofmaps
  Reusing element from cache
  Computing representation of integrals
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  4 entries computed in 0.000595 seconds
  Shape of reference tensor: (2, 2, 1, 1)
  Primary multi index:   rank = 2 dims = [2, 2] indices = [[0, 0], [0, 1], [1, 0], [1, 1]]
  Secondary multi index: rank = 2 dims = [1, 1] indices = [[0, 0]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [1, 1] indices = [[0, 0]]
  External multi index:  rank = 1 dims = [1] indices = [[0]]
  Reusing element from cache
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  4 entries computed in 0.000535 seconds
  Shape of reference tensor: (2, 2)
  Primary multi index:   rank = 1 dims = [2] indices = [[0], [1]]
  Secondary multi index: rank = 1 dims = [2] indices = [[0], [1]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [2] indices = [[0], [1]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Reusing element from cache
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  4 entries computed in 0.000357 seconds
  Shape of reference tensor: (2, 2)
  Primary multi index:   rank = 1 dims = [2] indices = [[0], [1]]
  Secondary multi index: rank = 1 dims = [2] indices = [[0], [1]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [2] indices = [[0], [1]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  4 entries computed in 0.00033 seconds
  Shape of reference tensor: (2, 2)
  Primary multi index:   rank = 1 dims = [2] indices = [[0], [1]]
  Secondary multi index: rank = 1 dims = [2] indices = [[0], [1]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [2] indices = [[0], [1]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Reusing element from cache
  Computing representation of forms
  
Compiler stage 2 finished in 0.00612497 seconds.

Compiler stage 3: Optimizing intermediate representation
--------------------------------------------------------
  
Compiler stage 3 finished in 0.000120878 seconds.

Compiler stage 4: Generating code
---------------------------------
  Generating code for 1 element(s)
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Generating code for 1 dofmap(s)
  Generating code for integrals
  Generating code for forms
  
Compiler stage 4 finished in 0.0160232 seconds.

Compiler stage 4.1: Generating additional wrapper code
------------------------------------------------------
  Generating wrapper code for DOLFIN
  
Compiler stage 4.1 finished in 0.000484943 seconds.

Compiler stage 5: Formatting code
---------------------------------
  
Output written to ./Poisson.h.
Compiler stage 5 finished in 0.000500917 seconds.

[1;37;32mFFC finished in 0.0415139 seconds.[0m
