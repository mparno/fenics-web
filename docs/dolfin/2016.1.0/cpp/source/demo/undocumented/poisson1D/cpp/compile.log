This is FFC, the FEniCS Form Compiler, version 2016.1.0.
UFC backend version 2016.1.0, signature 1b14b3cad537cb974523d529928ad9bde02ef657.
For further information, visit https://bitbucket.org/fenics-project/ffc/.

Compiling form Poisson

Compiler stage 1: Analyzing form(s)
-----------------------------------
  
  Geometric dimension:       1
  Number of cell subdomains: 0
  Rank:                      2
  Arguments:                 '(v_0, v_1)'
  Number of coefficients:    0
  Coefficients:              '[]'
  Unique elements:           'CG1(?), Vector<1 x CG1(?)>'
  Unique sub elements:       'CG1(?), Vector<1 x CG1(?)>'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Estimated cost of tensor representation: 2
  representation:    auto --> tensor
  quadrature_rule:   auto --> default
  quadrature_degree: auto --> 0
  quadrature_degree: 0
  
  Geometric dimension:                 1
  Number of cell subdomains:           0
  Number of exterior_facet subdomains: 0
  Rank:                                1
  Arguments:                           '(v_0)'
  Number of coefficients:              2
  Coefficients:                        '[w_0, w_1]'
  Unique elements:                     'CG1(?), Vector<1 x CG1(?)>'
  Unique sub elements:                 'CG1(?), Vector<1 x CG1(?)>'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 1
  representation:    auto --> tensor
  quadrature_rule:   auto --> default
  quadrature_degree: auto --> 2
  quadrature_degree: 2
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 1
  representation:    auto --> tensor
  quadrature_rule:   auto --> default
  quadrature_degree: auto --> 2
  quadrature_degree: 2
  
Compiler stage 1 finished in 0.0293429 seconds.

Compiler stage 2: Computing intermediate representation
-------------------------------------------------------
  Computing representation of 2 elements
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Computing representation of 2 dofmaps
  Reusing element from cache
  Reusing element from cache
  Computing representation of 1 coordinate mappings
  Reusing element from cache
  Computing representation of integrals
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  4 entries computed in 0.000765 seconds
  Shape of reference tensor: (2, 2, 1, 1)
  Primary multi index:   rank = 2 dims = [2, 2] indices = [[0, 0], [0, 1], [1, 0], [1, 1]]
  Secondary multi index: rank = 2 dims = [1, 1] indices = [[0, 0]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [1, 1] indices = [[0, 0]]
  External multi index:  rank = 1 dims = [1] indices = [[0]]
  Reusing element from cache
  Reusing element from cache
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  4 entries computed in 0.000694 seconds
  Shape of reference tensor: (2, 2)
  Primary multi index:   rank = 1 dims = [2] indices = [[0], [1]]
  Secondary multi index: rank = 1 dims = [2] indices = [[0], [1]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [2] indices = [[0], [1]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Reusing element from cache
  Reusing element from cache
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  4 entries computed in 0.000443 seconds
  Shape of reference tensor: (2, 2)
  Primary multi index:   rank = 1 dims = [2] indices = [[0], [1]]
  Secondary multi index: rank = 1 dims = [2] indices = [[0], [1]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [2] indices = [[0], [1]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  4 entries computed in 0.000434 seconds
  Shape of reference tensor: (2, 2)
  Primary multi index:   rank = 1 dims = [2] indices = [[0], [1]]
  Secondary multi index: rank = 1 dims = [2] indices = [[0], [1]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [2] indices = [[0], [1]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Reusing element from cache
  Reusing element from cache
  Computing representation of forms
  
Compiler stage 2 finished in 0.0114579 seconds.

Compiler stage 3: Optimizing intermediate representation
--------------------------------------------------------
  
Compiler stage 3 finished in 0.000170946 seconds.

Compiler stage 4: Generating code
---------------------------------
  Generating code for 2 element(s)
  Generating code for 2 dofmap(s)
  Generating code for 1 coordinate_mapping(s)
  Generating code for integrals
  Generating code for forms
  
Compiler stage 4 finished in 0.0291698 seconds.

Compiler stage 4.1: Generating additional wrapper code
------------------------------------------------------
  Generating wrapper code for DOLFIN
  
Compiler stage 4.1 finished in 0.000648975 seconds.

Compiler stage 5: Formatting code
---------------------------------
  
Compiler stage 5 finished in 0.000478029 seconds.

FFC finished in 0.0716321 seconds.
Output written to ./Poisson.h.
