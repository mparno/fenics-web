This is FFC, the FEniCS Form Compiler, version 2016.1.0.
UFC backend version 2016.1.0, signature 1b14b3cad537cb974523d529928ad9bde02ef657.
For further information, visit https://bitbucket.org/fenics-project/ffc/.

Compiling element Velocity

Compiler stage 1: Analyzing elements(s)
---------------------------------------
  
Compiler stage 1 finished in 0.000267982 seconds.

Compiler stage 2: Computing intermediate representation
-------------------------------------------------------
  Computing representation of 2 elements
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Computing representation of 2 dofmaps
  Reusing element from cache
  Reusing element from cache
  Computing representation of 0 coordinate mappings
  Computing representation of integrals
  Computing representation of forms
  
Compiler stage 2 finished in 0.113754 seconds.

Compiler stage 3: Optimizing intermediate representation
--------------------------------------------------------
  
Compiler stage 3 finished in 0.000124931 seconds.

Compiler stage 4: Generating code
---------------------------------
  Generating code for 2 element(s)
  Generating code for 2 dofmap(s)
  Generating code for 0 coordinate_mapping(s)
  Generating code for integrals
  Generating code for forms
  
Compiler stage 4 finished in 0.173298 seconds.

Compiler stage 4.1: Generating additional wrapper code
------------------------------------------------------
  Generating wrapper code for DOLFIN
  
Compiler stage 4.1 finished in 0.000211954 seconds.

Compiler stage 5: Formatting code
---------------------------------
  
Compiler stage 5 finished in 0.000473022 seconds.

FFC finished in 0.288462 seconds.
Output written to ./Velocity.h.
This is FFC, the FEniCS Form Compiler, version 2016.1.0.
UFC backend version 2016.1.0, signature 1b14b3cad537cb974523d529928ad9bde02ef657.
For further information, visit https://bitbucket.org/fenics-project/ffc/.

Compiling form AdvectionDiffusion

Compiler stage 1: Analyzing form(s)
-----------------------------------
  
  Geometric dimension:       2
  Number of cell subdomains: 0
  Rank:                      2
  Arguments:                 '(v_0, v_1)'
  Number of coefficients:    1
  Coefficients:              '[w_1]'
  Unique elements:           'CG1(?), Vector<2 x CG2(?)>, Vector<2 x CG1(?)>'
  Unique sub elements:       'CG1(?), Vector<2 x CG2(?)>, Vector<2 x CG1(?)>, CG2(?)
                             '
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 2
  representation:    auto --> tensor
  quadrature_rule:   auto --> default
  quadrature_degree: auto --> 3
  quadrature_degree: 3
  
  Geometric dimension:       2
  Number of cell subdomains: 0
  Rank:                      1
  Arguments:                 '(v_0)'
  Number of coefficients:    3
  Coefficients:              '[w_0, w_1, w_2]'
  Unique elements:           'CG1(?), Vector<2 x CG2(?)>, Vector<2 x CG1(?)>'
  Unique sub elements:       'CG1(?), Vector<2 x CG2(?)>, Vector<2 x CG1(?)>, CG2(?)
                             '
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 3
  representation:    auto --> tensor
  quadrature_rule:   auto --> default
  quadrature_degree: auto --> 3
  quadrature_degree: 3
  
Compiler stage 1 finished in 0.155089 seconds.

Compiler stage 2: Computing intermediate representation
-------------------------------------------------------
  Computing representation of 4 elements
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Computing representation of 4 dofmaps
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Computing representation of 1 coordinate mappings
  Reusing element from cache
  Computing representation of integrals
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  9 entries computed in 0.000556 seconds
  Shape of reference tensor: (3, 3)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 0 dims = [] indices = [[]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 0 dims = [] indices = [[]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  36 entries computed in 0.000607 seconds
  Shape of reference tensor: (3, 3, 2, 2)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 2 dims = [2, 2] indices = [[0, 0], [0, 1], [1, 0], [1, 1]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [2, 2] indices = [[0, 0], [0, 1], [1, 0], [1, 1]]
  External multi index:  rank = 1 dims = [2] indices = [[0], [1]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  432 entries computed in 0.00115 seconds
  Shape of reference tensor: (3, 3, 2, 12, 2)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 3 dims = [2, 12, 2] indices = [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [0, 2, 0], [0, 2, 1], [0, 3, 0], [0, 3, 1], [0, 4, 0], [0, 4, 1], [0, 5, 0], [0, 5, 1], [0, 6, 0], [0, 6, 1], [0, 7, 0], [0, 7, 1], [0, 8, 0], [0, 8, 1], [0, 9, 0], [0, 9, 1], [0, 10, 0], [0, 10, 1], [0, 11, 0], [0, 11, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1], [1, 2, 0], [1, 2, 1], [1, 3, 0], [1, 3, 1], [1, 4, 0], [1, 4, 1], [1, 5, 0], [1, 5, 1], [1, 6, 0], [1, 6, 1], [1, 7, 0], [1, 7, 1], [1, 8, 0], [1, 8, 1], [1, 9, 0], [1, 9, 1], [1, 10, 0], [1, 10, 1], [1, 11, 0], [1, 11, 1]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 3 dims = [2, 12, 2] indices = [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [0, 2, 0], [0, 2, 1], [0, 3, 0], [0, 3, 1], [0, 4, 0], [0, 4, 1], [0, 5, 0], [0, 5, 1], [0, 6, 0], [0, 6, 1], [0, 7, 0], [0, 7, 1], [0, 8, 0], [0, 8, 1], [0, 9, 0], [0, 9, 1], [0, 10, 0], [0, 10, 1], [0, 11, 0], [0, 11, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1], [1, 2, 0], [1, 2, 1], [1, 3, 0], [1, 3, 1], [1, 4, 0], [1, 4, 1], [1, 5, 0], [1, 5, 1], [1, 6, 0], [1, 6, 1], [1, 7, 0], [1, 7, 1], [1, 8, 0], [1, 8, 1], [1, 9, 0], [1, 9, 1], [1, 10, 0], [1, 10, 1], [1, 11, 0], [1, 11, 1]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  9 entries computed in 0.000535 seconds
  Shape of reference tensor: (3, 3)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  9 entries computed in 0.000524 seconds
  Shape of reference tensor: (3, 3)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  36 entries computed in 0.000626 seconds
  Shape of reference tensor: (3, 2, 3, 2)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 3 dims = [2, 3, 2] indices = [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [0, 2, 0], [0, 2, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1], [1, 2, 0], [1, 2, 1]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 3 dims = [2, 3, 2] indices = [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [0, 2, 0], [0, 2, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1], [1, 2, 0], [1, 2, 1]]
  External multi index:  rank = 1 dims = [2] indices = [[0], [1]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  432 entries computed in 0.00113 seconds
  Shape of reference tensor: (3, 3, 2, 12, 2)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 4 dims = [3, 2, 12, 2] indices = [[0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0], [0, 0, 1, 1], [0, 0, 2, 0], [0, 0, 2, 1], [0, 0, 3, 0], [0, 0, 3, 1], [0, 0, 4, 0], [0, 0, 4, 1], [0, 0, 5, 0], [0, 0, 5, 1], [0, 0, 6, 0], [0, 0, 6, 1], [0, 0, 7, 0], [0, 0, 7, 1], [0, 0, 8, 0], [0, 0, 8, 1], [0, 0, 9, 0], [0, 0, 9, 1], [0, 0, 10, 0], [0, 0, 10, 1], [0, 0, 11, 0], [0, 0, 11, 1], [0, 1, 0, 0], [0, 1, 0, 1], [0, 1, 1, 0], [0, 1, 1, 1], [0, 1, 2, 0], [0, 1, 2, 1], [0, 1, 3, 0], [0, 1, 3, 1], [0, 1, 4, 0], [0, 1, 4, 1], [0, 1, 5, 0], [0, 1, 5, 1], [0, 1, 6, 0], [0, 1, 6, 1], [0, 1, 7, 0], [0, 1, 7, 1], [0, 1, 8, 0], [0, 1, 8, 1], [0, 1, 9, 0], [0, 1, 9, 1], [0, 1, 10, 0], [0, 1, 10, 1], [0, 1, 11, 0], [0, 1, 11, 1], [1, 0, 0, 0], [1, 0, 0, 1], [1, 0, 1, 0], [1, 0, 1, 1], [1, 0, 2, 0], [1, 0, 2, 1], [1, 0, 3, 0], [1, 0, 3, 1], [1, 0, 4, 0], [1, 0, 4, 1], [1, 0, 5, 0], [1, 0, 5, 1], [1, 0, 6, 0], [1, 0, 6, 1], [1, 0, 7, 0], [1, 0, 7, 1], [1, 0, 8, 0], [1, 0, 8, 1], [1, 0, 9, 0], [1, 0, 9, 1], [1, 0, 10, 0], [1, 0, 10, 1], [1, 0, 11, 0], [1, 0, 11, 1], [1, 1, 0, 0], [1, 1, 0, 1], [1, 1, 1, 0], [1, 1, 1, 1], [1, 1, 2, 0], [1, 1, 2, 1], [1, 1, 3, 0], [1, 1, 3, 1], [1, 1, 4, 0], [1, 1, 4, 1], [1, 1, 5, 0], [1, 1, 5, 1], [1, 1, 6, 0], [1, 1, 6, 1], [1, 1, 7, 0], [1, 1, 7, 1], [1, 1, 8, 0], [1, 1, 8, 1], [1, 1, 9, 0], [1, 1, 9, 1], [1, 1, 10, 0], [1, 1, 10, 1], [1, 1, 11, 0], [1, 1, 11, 1], [2, 0, 0, 0], [2, 0, 0, 1], [2, 0, 1, 0], [2, 0, 1, 1], [2, 0, 2, 0], [2, 0, 2, 1], [2, 0, 3, 0], [2, 0, 3, 1], [2, 0, 4, 0], [2, 0, 4, 1], [2, 0, 5, 0], [2, 0, 5, 1], [2, 0, 6, 0], [2, 0, 6, 1], [2, 0, 7, 0], [2, 0, 7, 1], [2, 0, 8, 0], [2, 0, 8, 1], [2, 0, 9, 0], [2, 0, 9, 1], [2, 0, 10, 0], [2, 0, 10, 1], [2, 0, 11, 0], [2, 0, 11, 1], [2, 1, 0, 0], [2, 1, 0, 1], [2, 1, 1, 0], [2, 1, 1, 1], [2, 1, 2, 0], [2, 1, 2, 1], [2, 1, 3, 0], [2, 1, 3, 1], [2, 1, 4, 0], [2, 1, 4, 1], [2, 1, 5, 0], [2, 1, 5, 1], [2, 1, 6, 0], [2, 1, 6, 1], [2, 1, 7, 0], [2, 1, 7, 1], [2, 1, 8, 0], [2, 1, 8, 1], [2, 1, 9, 0], [2, 1, 9, 1], [2, 1, 10, 0], [2, 1, 10, 1], [2, 1, 11, 0], [2, 1, 11, 1]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 4 dims = [3, 2, 12, 2] indices = [[0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0], [0, 0, 1, 1], [0, 0, 2, 0], [0, 0, 2, 1], [0, 0, 3, 0], [0, 0, 3, 1], [0, 0, 4, 0], [0, 0, 4, 1], [0, 0, 5, 0], [0, 0, 5, 1], [0, 0, 6, 0], [0, 0, 6, 1], [0, 0, 7, 0], [0, 0, 7, 1], [0, 0, 8, 0], [0, 0, 8, 1], [0, 0, 9, 0], [0, 0, 9, 1], [0, 0, 10, 0], [0, 0, 10, 1], [0, 0, 11, 0], [0, 0, 11, 1], [0, 1, 0, 0], [0, 1, 0, 1], [0, 1, 1, 0], [0, 1, 1, 1], [0, 1, 2, 0], [0, 1, 2, 1], [0, 1, 3, 0], [0, 1, 3, 1], [0, 1, 4, 0], [0, 1, 4, 1], [0, 1, 5, 0], [0, 1, 5, 1], [0, 1, 6, 0], [0, 1, 6, 1], [0, 1, 7, 0], [0, 1, 7, 1], [0, 1, 8, 0], [0, 1, 8, 1], [0, 1, 9, 0], [0, 1, 9, 1], [0, 1, 10, 0], [0, 1, 10, 1], [0, 1, 11, 0], [0, 1, 11, 1], [1, 0, 0, 0], [1, 0, 0, 1], [1, 0, 1, 0], [1, 0, 1, 1], [1, 0, 2, 0], [1, 0, 2, 1], [1, 0, 3, 0], [1, 0, 3, 1], [1, 0, 4, 0], [1, 0, 4, 1], [1, 0, 5, 0], [1, 0, 5, 1], [1, 0, 6, 0], [1, 0, 6, 1], [1, 0, 7, 0], [1, 0, 7, 1], [1, 0, 8, 0], [1, 0, 8, 1], [1, 0, 9, 0], [1, 0, 9, 1], [1, 0, 10, 0], [1, 0, 10, 1], [1, 0, 11, 0], [1, 0, 11, 1], [1, 1, 0, 0], [1, 1, 0, 1], [1, 1, 1, 0], [1, 1, 1, 1], [1, 1, 2, 0], [1, 1, 2, 1], [1, 1, 3, 0], [1, 1, 3, 1], [1, 1, 4, 0], [1, 1, 4, 1], [1, 1, 5, 0], [1, 1, 5, 1], [1, 1, 6, 0], [1, 1, 6, 1], [1, 1, 7, 0], [1, 1, 7, 1], [1, 1, 8, 0], [1, 1, 8, 1], [1, 1, 9, 0], [1, 1, 9, 1], [1, 1, 10, 0], [1, 1, 10, 1], [1, 1, 11, 0], [1, 1, 11, 1], [2, 0, 0, 0], [2, 0, 0, 1], [2, 0, 1, 0], [2, 0, 1, 1], [2, 0, 2, 0], [2, 0, 2, 1], [2, 0, 3, 0], [2, 0, 3, 1], [2, 0, 4, 0], [2, 0, 4, 1], [2, 0, 5, 0], [2, 0, 5, 1], [2, 0, 6, 0], [2, 0, 6, 1], [2, 0, 7, 0], [2, 0, 7, 1], [2, 0, 8, 0], [2, 0, 8, 1], [2, 0, 9, 0], [2, 0, 9, 1], [2, 0, 10, 0], [2, 0, 10, 1], [2, 0, 11, 0], [2, 0, 11, 1], [2, 1, 0, 0], [2, 1, 0, 1], [2, 1, 1, 0], [2, 1, 1, 1], [2, 1, 2, 0], [2, 1, 2, 1], [2, 1, 3, 0], [2, 1, 3, 1], [2, 1, 4, 0], [2, 1, 4, 1], [2, 1, 5, 0], [2, 1, 5, 1], [2, 1, 6, 0], [2, 1, 6, 1], [2, 1, 7, 0], [2, 1, 7, 1], [2, 1, 8, 0], [2, 1, 8, 1], [2, 1, 9, 0], [2, 1, 9, 1], [2, 1, 10, 0], [2, 1, 10, 1], [2, 1, 11, 0], [2, 1, 11, 1]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Computing representation of forms
  
Compiler stage 2 finished in 0.01947 seconds.

Compiler stage 3: Optimizing intermediate representation
--------------------------------------------------------
  
Compiler stage 3 finished in 0.000157118 seconds.

Compiler stage 4: Generating code
---------------------------------
  Generating code for 4 element(s)
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Generating code for 4 dofmap(s)
  Generating code for 1 coordinate_mapping(s)
  Generating code for integrals
  Generating code for forms
  
Compiler stage 4 finished in 0.263447 seconds.

Compiler stage 4.1: Generating additional wrapper code
------------------------------------------------------
  Generating wrapper code for DOLFIN
  
Compiler stage 4.1 finished in 0.000663996 seconds.

Compiler stage 5: Formatting code
---------------------------------
  
Compiler stage 5 finished in 0.000643015 seconds.

FFC finished in 0.439816 seconds.
Output written to ./AdvectionDiffusion.h.
