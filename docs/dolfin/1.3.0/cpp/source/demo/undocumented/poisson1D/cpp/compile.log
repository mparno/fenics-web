This is FFC, the FEniCS Form Compiler, version 1.3.0.
For further information, visit http://www.fenics.org/ffc/.

Compiling form Poisson

Compiler stage 1: Analyzing form(s)
-----------------------------------
  
  Name:                   'a'
  Cell:                   <interval cell in 1D>
  Topological dimension:  1
  Geometric dimension:    1
  Rank:                   2
  Number of coefficients: 0
  Arguments:              '[v_{-2}, v_{-1}]'
  Coefficients:           '[]'
  Argument names:         '[v, u]'
  Coefficient names:      '[]'
  Unique elements:        'CG1(?)'
  Unique sub elements:    'CG1(?)'
  Domains:                (Domain(Cell('interval', 1), 'interval_multiverse', 1, 1),
                          )
  Top level domains:      (Domain(Cell('interval', 1), 'interval_multiverse', 1, 1),
                          )
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Estimated cost of tensor representation: 2
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 0
  quadrature_degree: auto --> 0
  quadrature_rule:   auto --> default
  
  Name:                   'L'
  Cell:                   <interval cell in 1D>
  Topological dimension:  1
  Geometric dimension:    1
  Rank:                   1
  Number of coefficients: 2
  Arguments:              '[v_{-2}]'
  Coefficients:           '[w_0, w_1]'
  Argument names:         '[v]'
  Coefficient names:      '[f, g]'
  Unique elements:        'CG1(?)'
  Unique sub elements:    'CG1(?)'
  Domains:                (Domain(Cell('interval', 1), 'interval_multiverse', 1, 1),
                          )
  Top level domains:      (Domain(Cell('interval', 1), 'interval_multiverse', 1, 1),
                          )
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 1
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 2
  quadrature_degree: auto --> 2
  quadrature_rule:   auto --> default
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 1
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 2
  quadrature_degree: auto --> 2
  quadrature_rule:   auto --> default
  
Compiler stage 1 finished in 0.0112531 seconds.

Compiler stage 2: Computing intermediate representation
-------------------------------------------------------
  Computing representation of 1 elements
  Reusing element from cache
  Reusing element from cache
  Computing representation of 1 dofmaps
  Reusing element from cache
  Computing representation of integrals
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  4 entries computed in 0.000733 seconds
  Shape of reference tensor: (2, 2, 1, 1)
  Primary multi index:   rank = 2 dims = [2, 2] indices = [[0, 0], [0, 1], [1, 0], [1, 1]]
  Secondary multi index: rank = 2 dims = [1, 1] indices = [[0, 0]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [1, 1] indices = [[0, 0]]
  External multi index:  rank = 1 dims = [1] indices = [[0]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  4 entries computed in 0.000634 seconds
  Shape of reference tensor: (2, 2)
  Primary multi index:   rank = 1 dims = [2] indices = [[0], [1]]
  Secondary multi index: rank = 1 dims = [2] indices = [[0], [1]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [2] indices = [[0], [1]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  4 entries computed in 0.000399 seconds
  Shape of reference tensor: (2, 2)
  Primary multi index:   rank = 1 dims = [2] indices = [[0], [1]]
  Secondary multi index: rank = 1 dims = [2] indices = [[0], [1]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [2] indices = [[0], [1]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  4 entries computed in 0.000368 seconds
  Shape of reference tensor: (2, 2)
  Primary multi index:   rank = 1 dims = [2] indices = [[0], [1]]
  Secondary multi index: rank = 1 dims = [2] indices = [[0], [1]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [2] indices = [[0], [1]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing representation of forms
  
Compiler stage 2 finished in 0.00789809 seconds.

Compiler stage 3: Optimizing intermediate representation
--------------------------------------------------------
  FErari not installed, skipping tensor optimizations
  FErari not installed, skipping tensor optimizations
  FErari not installed, skipping tensor optimizations
  
Compiler stage 3 finished in 0.000226974 seconds.

Compiler stage 4: Generating code
---------------------------------
  Generating code for 1 element(s)
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Generating code for 1 dofmap(s)
  Generating code for integrals
  Generating code for forms
  
Compiler stage 4 finished in 0.01739 seconds.

Compiler stage 4.1: Generating additional wrapper code
------------------------------------------------------
  Generating wrapper code for DOLFIN
  
Compiler stage 4.1 finished in 0.000469923 seconds.

Compiler stage 5: Formatting code
---------------------------------
  Output written to ./Poisson.h.
  
Compiler stage 5 finished in 0.000475883 seconds.

[1;37;32mFFC finished in 0.037955 seconds.[0m
