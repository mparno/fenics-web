This is FFC, the FEniCS Form Compiler, version 1.3.0.
For further information, visit http://www.fenics.org/ffc/.

Compiling form AdaptivePoisson

Compiler stage 1: Analyzing form(s)
-----------------------------------
  
  Name:                   ''
  Cell:                   <triangle cell in 2D>
  Topological dimension:  2
  Geometric dimension:    2
  Rank:                   2
  Number of coefficients: 0
  Arguments:              '[v_0, v_1]'
  Coefficients:           '[]'
  Argument names:         '[v0, v1]'
  Coefficient names:      '[]'
  Unique elements:        'CG1(?)'
  Unique sub elements:    'CG1(?)'
  Domains:                (Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2),
                          )
  Top level domains:      (Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2),
                          )
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Estimated cost of tensor representation: 2
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 0
  quadrature_degree: auto --> 0
  quadrature_rule:   auto --> default
  
  Name:                   ''
  Cell:                   <triangle cell in 2D>
  Topological dimension:  2
  Geometric dimension:    2
  Rank:                   1
  Number of coefficients: 0
  Arguments:              '[v_2]'
  Coefficients:           '[]'
  Argument names:         '[v0]'
  Coefficient names:      '[]'
  Unique elements:        'CG1(?)'
  Unique sub elements:    'CG1(?)'
  Domains:                (Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2),
                          )
  Top level domains:      (Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2),
                          )
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Estimated cost of tensor representation: 0
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 1
  quadrature_degree: auto --> 1
  quadrature_rule:   auto --> default
  
  Name:                   ''
  Cell:                   <triangle cell in 2D>
  Topological dimension:  2
  Geometric dimension:    2
  Rank:                   0
  Number of coefficients: 4
  Arguments:              '[]'
  Coefficients:           '[w_0, w_1, w_2, w_3]'
  Argument names:         '[]'
  Coefficient names:      '[f, g, __discrete_primal_solution, __improved_dual]'
  Unique elements:        'CG1(?), CG2(?)'
  Unique sub elements:    'CG1(?), CG2(?)'
  Domains:                (Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2),
                          )
  Top level domains:      (Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2),
                          )
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 4
  representation:    auto --> quadrature
  Selecting quadrature degree based on total polynomial degree of integrand: 3
  quadrature_degree: auto --> 3
  quadrature_rule:   auto --> default
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 2
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 3
  quadrature_degree: auto --> 3
  quadrature_rule:   auto --> default
  
  Name:                   ''
  Cell:                   <triangle cell in 2D>
  Topological dimension:  2
  Geometric dimension:    2
  Rank:                   2
  Number of coefficients: 1
  Arguments:              '[v_{-2}, v_{-1}]'
  Coefficients:           '[w_4]'
  Argument names:         '[v0, v1]'
  Coefficient names:      '[__cell_bubble]'
  Unique elements:        'DG1(?), B3(?)'
  Unique sub elements:    'DG1(?), B3(?)'
  Domains:                (Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2),
                          )
  Top level domains:      (Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2),
                          )
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Estimated cost of tensor representation: 1
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 5
  quadrature_degree: auto --> 5
  quadrature_rule:   auto --> default
  
  Name:                   ''
  Cell:                   <triangle cell in 2D>
  Topological dimension:  2
  Geometric dimension:    2
  Rank:                   1
  Number of coefficients: 4
  Arguments:              '[v_{-2}]'
  Coefficients:           '[w_0, w_1, w_2, w_4]'
  Argument names:         '[v0]'
  Coefficient names:      '[f, g, __discrete_primal_solution, __cell_bubble]'
  Unique elements:        'DG1(?), CG1(?), B3(?)'
  Unique sub elements:    'DG1(?), CG1(?), B3(?)'
  Domains:                (Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2),
                          )
  Top level domains:      (Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2),
                          )
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 4
  representation:    auto --> quadrature
  Selecting quadrature degree based on total polynomial degree of integrand: 5
  quadrature_degree: auto --> 5
  quadrature_rule:   auto --> default
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 2
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 5
  quadrature_degree: auto --> 5
  quadrature_rule:   auto --> default
  
  Name:                   ''
  Cell:                   <triangle cell in 2D>
  Topological dimension:  2
  Geometric dimension:    2
  Rank:                   2
  Number of coefficients: 1
  Arguments:              '[v_{-2}, v_{-1}]'
  Coefficients:           '[w_6]'
  Argument names:         '[v0, v1]'
  Coefficient names:      '[__cell_cone]'
  Unique elements:        'DG1(?), DG2(?)'
  Unique sub elements:    'DG1(?), DG2(?)'
  Domains:                (Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2),
                          )
  Top level domains:      (Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2),
                          )
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 1
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 4
  quadrature_degree: auto --> 4
  quadrature_rule:   auto --> default
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 1
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 4
  quadrature_degree: auto --> 4
  quadrature_rule:   auto --> default
  
  Name:                   ''
  Cell:                   <triangle cell in 2D>
  Topological dimension:  2
  Geometric dimension:    2
  Rank:                   1
  Number of coefficients: 5
  Arguments:              '[v_{-2}]'
  Coefficients:           '[w_0, w_1, w_2, w_5, w_6]'
  Argument names:         '[v0]'
  Coefficient names:      '[f, g, __discrete_primal_solution, __cell_residual, __cel
                          l_cone]'
  Unique elements:        'DG1(?), CG1(?), DG2(?)'
  Unique sub elements:    'DG1(?), CG1(?), DG2(?)'
  Domains:                (Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2),
                          )
  Top level domains:      (Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2),
                          )
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 4
  representation:    auto --> quadrature
  Selecting quadrature degree based on total polynomial degree of integrand: 4
  quadrature_degree: auto --> 4
  quadrature_rule:   auto --> default
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 2
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 4
  quadrature_degree: auto --> 4
  quadrature_rule:   auto --> default
  
  Name:                   ''
  Cell:                   <triangle cell in 2D>
  Topological dimension:  2
  Geometric dimension:    2
  Rank:                   1
  Number of coefficients: 4
  Arguments:              '[v_{-2}]'
  Coefficients:           '[w_3, w_5, w_7, w_8]'
  Argument names:         '[v0]'
  Coefficient names:      '[__improved_dual, __cell_residual, __facet_residual, __di
                          screte_dual_solution]'
  Unique elements:        'DG0(?), CG2(?), DG1(?), CG1(?)'
  Unique sub elements:    'DG0(?), CG2(?), DG1(?), CG1(?)'
  Domains:                (Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2),
                          )
  Top level domains:      (Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2),
                          )
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 2
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 3
  quadrature_degree: auto --> 3
  quadrature_rule:   auto --> default
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 2
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 3
  quadrature_degree: auto --> 3
  quadrature_rule:   auto --> default
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 2
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 3
  quadrature_degree: auto --> 3
  quadrature_rule:   auto --> default
  
  Name:                   'lhs'
  Cell:                   <triangle cell in 2D>
  Topological dimension:  2
  Geometric dimension:    2
  Rank:                   2
  Number of coefficients: 0
  Arguments:              '[v_{-2}, v_{-1}]'
  Coefficients:           '[]'
  Argument names:         '[v, u]'
  Coefficient names:      '[]'
  Unique elements:        'CG1(?)'
  Unique sub elements:    'CG1(?)'
  Domains:                (Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2),
                          )
  Top level domains:      (Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2),
                          )
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 2
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 0
  quadrature_degree: auto --> 0
  quadrature_rule:   auto --> default
  
  Name:                   'rhs'
  Cell:                   <triangle cell in 2D>
  Topological dimension:  2
  Geometric dimension:    2
  Rank:                   1
  Number of coefficients: 2
  Arguments:              '[v_{-2}]'
  Coefficients:           '[w_0, w_1]'
  Argument names:         '[v]'
  Coefficient names:      '[f, g]'
  Unique elements:        'CG1(?)'
  Unique sub elements:    'CG1(?)'
  Domains:                (Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2),
                          )
  Top level domains:      (Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2),
                          )
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 1
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 2
  quadrature_degree: auto --> 2
  quadrature_rule:   auto --> default
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 1
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 2
  quadrature_degree: auto --> 2
  quadrature_rule:   auto --> default
  
  Name:                   'goal'
  Cell:                   <triangle cell in 2D>
  Topological dimension:  2
  Geometric dimension:    2
  Rank:                   0
  Number of coefficients: 1
  Arguments:              '[]'
  Coefficients:           '[w_2]'
  Argument names:         '[]'
  Coefficient names:      '[__discrete_primal_solution]'
  Unique elements:        'CG1(?)'
  Unique sub elements:    'CG1(?)'
  Domains:                (Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2),
                          )
  Top level domains:      (Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2),
                          )
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Estimated cost of tensor representation: 1
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 1
  quadrature_degree: auto --> 1
  quadrature_rule:   auto --> default
  
Compiler stage 1 finished in 0.068691 seconds.

Compiler stage 2: Computing intermediate representation
-------------------------------------------------------
  Computing representation of 6 elements
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Computing representation of 6 dofmaps
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Computing representation of integrals
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  36 entries computed in 0.000757 seconds
  Shape of reference tensor: (3, 3, 2, 2)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 2 dims = [2, 2] indices = [[0, 0], [0, 1], [1, 0], [1, 1]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [2, 2] indices = [[0, 0], [0, 1], [1, 0], [1, 1]]
  External multi index:  rank = 1 dims = [2] indices = [[0], [1]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  3 entries computed in 0.000437 seconds
  Shape of reference tensor: (3,)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 0 dims = [] indices = [[]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 0 dims = [] indices = [[]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing quadrature representation
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  
  QG-utils, psi_tables:
  {6: {FiniteElement('Lagrange', Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2), 2, None): {None: {None: {(0, 1): array([[0.56384396370849277, 0.072266525787876734, 0.56384396370849243,
          -1.6361104894963669, 0.072266525787876068, -1.6361104894963674],
         [8.3266726846886741e-17, -1.1102230246251565e-16,
          -1.6653345369377348e-16, -1.1102230246251565e-16,
          -5.5511151231257827e-17, -1.3877787807814457e-16],
         [-0.072266525787875513, -0.56384396370849144, 1.6361104894963674,
          -0.56384396370849144, 1.6361104894963674, -0.072266525787875735],
         [2.6361104894963665, 2.6361104894963665, 0.92773347421212327,
          0.92773347421212304, 0.43615603629150668, 0.43615603629150723],
         [-0.49157743792061637, 0.49157743792061592, -2.1999544532048594,
          2.1999544532048594, -1.7083770152842432, 1.7083770152842432],
         [-2.6361104894963674, -2.6361104894963674, -0.92773347421212338,
          -0.9277334742121236, -0.43615603629150701, -0.43615603629150695]], dtype=object), (1, 0): array([[0.56384396370849266, 0.072266525787876401, 0.56384396370849277,
          -1.6361104894963672, 0.07226652578787629, -1.6361104894963676],
         [1.6361104894963678, 1.6361104894963676, -0.072266525787876068,
          -0.072266525787876124, -0.56384396370849255, -0.56384396370849243],
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
         [0.92773347421212327, 0.43615603629150695, 2.6361104894963661,
          0.43615603629150695, 2.6361104894963661, 0.92773347421212327],
         [-0.92773347421212327, -0.43615603629150695, -2.6361104894963661,
          -0.43615603629150695, -2.6361104894963661, -0.92773347421212327],
         [-2.1999544532048607, -1.7083770152842441, -0.49157743792061698,
          1.7083770152842432, 0.49157743792061592, 2.1999544532048598]], dtype=object), (0, 0): array([[-0.08525999807368706, -0.12434719365631873, -0.085259998073687046,
          0.20960719173000564, -0.12434719365631869, 0.20960719173000567],
         [0.20960719173000553, 0.20960719173000553, -0.12434719365631877,
          -0.12434719365631874, -0.08525999807368706, -0.08525999807368706],
         [-0.1243471936563187, -0.08525999807368706, 0.20960719173000567,
          -0.08525999807368706, 0.20960719173000567, -0.1243471936563187],
         [0.61140198570687188, 0.28743887558130055, 0.61140198570687188,
          0.10115913871182745, 0.28743887558130055, 0.10115913871182744],
         [0.10115913871182744, 0.10115913871182741, 0.2874388755813006,
          0.28743887558130055, 0.61140198570687199, 0.61140198570687188],
         [0.28743887558130055, 0.61140198570687199, 0.10115913871182744,
          0.61140198570687199, 0.10115913871182744, 0.28743887558130055]], dtype=object)}}}, FiniteElement('Lagrange', Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2), 1, None): {None: {None: {(0, 1): array([[-0.99999999999999989, -0.99999999999999989, -0.99999999999999989,
          -0.99999999999999989, -0.99999999999999989, -0.99999999999999989],
         [1.1102230246251565e-16, 1.1102230246251565e-16,
          1.1102230246251565e-16, 1.1102230246251565e-16,
          1.1102230246251565e-16, 1.1102230246251565e-16],
         [0.99999999999999978, 0.99999999999999978, 0.99999999999999978,
          0.99999999999999978, 0.99999999999999978, 0.99999999999999978]], dtype=object), (1, 0): array([[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0],
         [1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], dtype=object), (0, 0): array([[0.10903900907287697, 0.23193336855303098, 0.109039009072877,
          0.65902762237409196, 0.23193336855303104, 0.65902762237409196],
         [0.65902762237409196, 0.65902762237409196, 0.23193336855303104,
          0.23193336855303098, 0.109039009072877, 0.10903900907287697],
         [0.23193336855303098, 0.10903900907287697, 0.65902762237409185,
          0.10903900907287697, 0.65902762237409185, 0.23193336855303098]], dtype=object)}}}}}
  
  QG-utils, psi_tables, flat_tables:
  {'FE0_D10': array([[-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0]], dtype=object), 'FE0_D01': array([[-0.99999999999999989, 1.1102230246251565e-16, 0.99999999999999978],
         [-0.99999999999999989, 1.1102230246251565e-16, 0.99999999999999978],
         [-0.99999999999999989, 1.1102230246251565e-16, 0.99999999999999978],
         [-0.99999999999999989, 1.1102230246251565e-16, 0.99999999999999978],
         [-0.99999999999999989, 1.1102230246251565e-16, 0.99999999999999978],
         [-0.99999999999999989, 1.1102230246251565e-16, 0.99999999999999978]], dtype=object), 'FE1_D01': array([[0.56384396370849277, 8.3266726846886741e-17, -0.072266525787875513,
          2.6361104894963665, -0.49157743792061637, -2.6361104894963674],
         [0.072266525787876734, -1.1102230246251565e-16,
          -0.56384396370849144, 2.6361104894963665, 0.49157743792061592,
          -2.6361104894963674],
         [0.56384396370849243, -1.6653345369377348e-16, 1.6361104894963674,
          0.92773347421212327, -2.1999544532048594, -0.92773347421212338],
         [-1.6361104894963669, -1.1102230246251565e-16, -0.56384396370849144,
          0.92773347421212304, 2.1999544532048594, -0.9277334742121236],
         [0.072266525787876068, -5.5511151231257827e-17, 1.6361104894963674,
          0.43615603629150668, -1.7083770152842432, -0.43615603629150701],
         [-1.6361104894963674, -1.3877787807814457e-16,
          -0.072266525787875735, 0.43615603629150723, 1.7083770152842432,
          -0.43615603629150695]], dtype=object), 'FE1_D10': array([[0.56384396370849266, 1.6361104894963678, 0.0, 0.92773347421212327,
          -0.92773347421212327, -2.1999544532048607],
         [0.072266525787876401, 1.6361104894963676, 0.0, 0.43615603629150695,
          -0.43615603629150695, -1.7083770152842441],
         [0.56384396370849277, -0.072266525787876068, 0.0,
          2.6361104894963661, -2.6361104894963661, -0.49157743792061698],
         [-1.6361104894963672, -0.072266525787876124, 0.0,
          0.43615603629150695, -0.43615603629150695, 1.7083770152842432],
         [0.07226652578787629, -0.56384396370849255, 0.0, 2.6361104894963661,
          -2.6361104894963661, 0.49157743792061592],
         [-1.6361104894963676, -0.56384396370849243, 0.0,
          0.92773347421212327, -0.92773347421212327, 2.1999544532048598]], dtype=object), 'FE0': array([[0.10903900907287697, 0.65902762237409196, 0.23193336855303098],
         [0.23193336855303098, 0.65902762237409196, 0.10903900907287697],
         [0.109039009072877, 0.23193336855303104, 0.65902762237409185],
         [0.65902762237409196, 0.23193336855303098, 0.10903900907287697],
         [0.23193336855303104, 0.109039009072877, 0.65902762237409185],
         [0.65902762237409196, 0.10903900907287697, 0.23193336855303098]], dtype=object), 'FE1': array([[-0.08525999807368706, 0.20960719173000553, -0.1243471936563187,
          0.61140198570687188, 0.10115913871182744, 0.28743887558130055],
         [-0.12434719365631873, 0.20960719173000553, -0.08525999807368706,
          0.28743887558130055, 0.10115913871182741, 0.61140198570687199],
         [-0.085259998073687046, -0.12434719365631877, 0.20960719173000567,
          0.61140198570687188, 0.2874388755813006, 0.10115913871182744],
         [0.20960719173000564, -0.12434719365631874, -0.08525999807368706,
          0.10115913871182745, 0.28743887558130055, 0.61140198570687199],
         [-0.12434719365631869, -0.08525999807368706, 0.20960719173000567,
          0.28743887558130055, 0.61140198570687199, 0.10115913871182744],
         [0.20960719173000567, -0.08525999807368706, -0.1243471936563187,
          0.10115913871182744, 0.61140198570687188, 0.28743887558130055]], dtype=object)}
  
  tables: {'FE0_D10': array([[-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0]], dtype=object), 'FE0_D01': array([[-0.99999999999999989, 1.1102230246251565e-16, 0.99999999999999978],
         [-0.99999999999999989, 1.1102230246251565e-16, 0.99999999999999978],
         [-0.99999999999999989, 1.1102230246251565e-16, 0.99999999999999978],
         [-0.99999999999999989, 1.1102230246251565e-16, 0.99999999999999978],
         [-0.99999999999999989, 1.1102230246251565e-16, 0.99999999999999978],
         [-0.99999999999999989, 1.1102230246251565e-16, 0.99999999999999978]], dtype=object), 'FE1_D01': array([[0.56384396370849277, 8.3266726846886741e-17, -0.072266525787875513,
          2.6361104894963665, -0.49157743792061637, -2.6361104894963674],
         [0.072266525787876734, -1.1102230246251565e-16,
          -0.56384396370849144, 2.6361104894963665, 0.49157743792061592,
          -2.6361104894963674],
         [0.56384396370849243, -1.6653345369377348e-16, 1.6361104894963674,
          0.92773347421212327, -2.1999544532048594, -0.92773347421212338],
         [-1.6361104894963669, -1.1102230246251565e-16, -0.56384396370849144,
          0.92773347421212304, 2.1999544532048594, -0.9277334742121236],
         [0.072266525787876068, -5.5511151231257827e-17, 1.6361104894963674,
          0.43615603629150668, -1.7083770152842432, -0.43615603629150701],
         [-1.6361104894963674, -1.3877787807814457e-16,
          -0.072266525787875735, 0.43615603629150723, 1.7083770152842432,
          -0.43615603629150695]], dtype=object), 'FE1_D10': array([[0.56384396370849266, 1.6361104894963678, 0.0, 0.92773347421212327,
          -0.92773347421212327, -2.1999544532048607],
         [0.072266525787876401, 1.6361104894963676, 0.0, 0.43615603629150695,
          -0.43615603629150695, -1.7083770152842441],
         [0.56384396370849277, -0.072266525787876068, 0.0,
          2.6361104894963661, -2.6361104894963661, -0.49157743792061698],
         [-1.6361104894963672, -0.072266525787876124, 0.0,
          0.43615603629150695, -0.43615603629150695, 1.7083770152842432],
         [0.07226652578787629, -0.56384396370849255, 0.0, 2.6361104894963661,
          -2.6361104894963661, 0.49157743792061592],
         [-1.6361104894963676, -0.56384396370849243, 0.0,
          0.92773347421212327, -0.92773347421212327, 2.1999544532048598]], dtype=object), 'FE0': array([[0.10903900907287697, 0.65902762237409196, 0.23193336855303098],
         [0.23193336855303098, 0.65902762237409196, 0.10903900907287697],
         [0.109039009072877, 0.23193336855303104, 0.65902762237409185],
         [0.65902762237409196, 0.23193336855303098, 0.10903900907287697],
         [0.23193336855303104, 0.109039009072877, 0.65902762237409185],
         [0.65902762237409196, 0.10903900907287697, 0.23193336855303098]], dtype=object), 'FE1': array([[-0.08525999807368706, 0.20960719173000553, -0.1243471936563187,
          0.61140198570687188, 0.10115913871182744, 0.28743887558130055],
         [-0.12434719365631873, 0.20960719173000553, -0.08525999807368706,
          0.28743887558130055, 0.10115913871182741, 0.61140198570687199],
         [-0.085259998073687046, -0.12434719365631877, 0.20960719173000567,
          0.61140198570687188, 0.2874388755813006, 0.10115913871182744],
         [0.20960719173000564, -0.12434719365631874, -0.08525999807368706,
          0.10115913871182745, 0.28743887558130055, 0.61140198570687199],
         [-0.12434719365631869, -0.08525999807368706, 0.20960719173000567,
          0.28743887558130055, 0.61140198570687199, 0.10115913871182744],
         [0.20960719173000567, -0.08525999807368706, -0.1243471936563187,
          0.10115913871182744, 0.61140198570687188, 0.28743887558130055]], dtype=object)}
  
  name_map: {}
  
  inv_name_map: {'FE0_D10': 'FE0_D10', 'FE0_D01': 'FE0_D01', 'FE1_D01': 'FE1_D01', 'FE1_D10': 'FE1_D10', 'FE0': 'FE0', 'FE1': 'FE1'}
  
  QG-utils, psi_tables, unique_tables:
  {'FE0_D01': array([[-0.99999999999999989, 0.99999999999999978],
         [-0.99999999999999989, 0.99999999999999978],
         [-0.99999999999999989, 0.99999999999999978],
         [-0.99999999999999989, 0.99999999999999978],
         [-0.99999999999999989, 0.99999999999999978],
         [-0.99999999999999989, 0.99999999999999978]], dtype=object), 'FE1_D01': array([[0.56384396370849277, -0.072266525787875513, 2.6361104894963665,
          -0.49157743792061637, -2.6361104894963674],
         [0.072266525787876734, -0.56384396370849144, 2.6361104894963665,
          0.49157743792061592, -2.6361104894963674],
         [0.56384396370849243, 1.6361104894963674, 0.92773347421212327,
          -2.1999544532048594, -0.92773347421212338],
         [-1.6361104894963669, -0.56384396370849144, 0.92773347421212304,
          2.1999544532048594, -0.9277334742121236],
         [0.072266525787876068, 1.6361104894963674, 0.43615603629150668,
          -1.7083770152842432, -0.43615603629150701],
         [-1.6361104894963674, -0.072266525787875735, 0.43615603629150723,
          1.7083770152842432, -0.43615603629150695]], dtype=object), 'FE1_D10': array([[0.56384396370849266, 1.6361104894963678, 0.92773347421212327,
          -0.92773347421212327, -2.1999544532048607],
         [0.072266525787876401, 1.6361104894963676, 0.43615603629150695,
          -0.43615603629150695, -1.7083770152842441],
         [0.56384396370849277, -0.072266525787876068, 2.6361104894963661,
          -2.6361104894963661, -0.49157743792061698],
         [-1.6361104894963672, -0.072266525787876124, 0.43615603629150695,
          -0.43615603629150695, 1.7083770152842432],
         [0.07226652578787629, -0.56384396370849255, 2.6361104894963661,
          -2.6361104894963661, 0.49157743792061592],
         [-1.6361104894963676, -0.56384396370849243, 0.92773347421212327,
          -0.92773347421212327, 2.1999544532048598]], dtype=object), 'FE0': array([[0.10903900907287697, 0.65902762237409196, 0.23193336855303098],
         [0.23193336855303098, 0.65902762237409196, 0.10903900907287697],
         [0.109039009072877, 0.23193336855303104, 0.65902762237409185],
         [0.65902762237409196, 0.23193336855303098, 0.10903900907287697],
         [0.23193336855303104, 0.109039009072877, 0.65902762237409185],
         [0.65902762237409196, 0.10903900907287697, 0.23193336855303098]], dtype=object), 'FE1': array([[-0.08525999807368706, 0.20960719173000553, -0.1243471936563187,
          0.61140198570687188, 0.10115913871182744, 0.28743887558130055],
         [-0.12434719365631873, 0.20960719173000553, -0.08525999807368706,
          0.28743887558130055, 0.10115913871182741, 0.61140198570687199],
         [-0.085259998073687046, -0.12434719365631877, 0.20960719173000567,
          0.61140198570687188, 0.2874388755813006, 0.10115913871182744],
         [0.20960719173000564, -0.12434719365631874, -0.08525999807368706,
          0.10115913871182745, 0.28743887558130055, 0.61140198570687199],
         [-0.12434719365631869, -0.08525999807368706, 0.20960719173000567,
          0.28743887558130055, 0.61140198570687199, 0.10115913871182744],
         [0.20960719173000567, -0.08525999807368706, -0.1243471936563187,
          0.10115913871182744, 0.61140198570687188, 0.28743887558130055]], dtype=object)}
  
  QG-utils, psi_tables, name_map:
  {'FE0_D10': ('FE0_D01', (1, [0, 1]), False, False), 'FE0_D01': ('FE0_D01', (0, [0, 2]), False, False), 'FE1_D01': ('FE1_D01', (2, [0, 2, 3, 4, 5]), False, False), 'FE1_D10': ('FE1_D10', (3, [0, 1, 3, 4, 5]), False, False), 'FE0': ('FE0', (), False, False), 'FE1': ('FE1', (), False, False)}
  Transforming cell integral
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00148 seconds
  Shape of reference tensor: (3, 6)
  Primary multi index:   rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00135 seconds
  Shape of reference tensor: (3, 6)
  Primary multi index:   rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00134 seconds
  Shape of reference tensor: (3, 6)
  Primary multi index:   rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00243 seconds
  Shape of reference tensor: (3, 3, 1)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [1] indices = [[0]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [1] indices = [[0]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing quadrature representation
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  
  QG-utils, psi_tables:
  {7: {FiniteElement('Bubble', Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2), 3, None): {None: {None: {(0, 1): array([[-1.1102230246251565e-16, 3.6637359812630166e-15,
          -1.9037602159047706, 1.9037602159047724, -2.2204460492503131e-16,
          5.2098826648843648, -5.2098826648843612]], dtype=object), (1, 0): array([[3.4373799093713836e-16, -1.9037602159047682,
          3.9672666806617637e-15, 1.9037602159047715, 5.2098826648843648,
          2.1527793290222102e-18, -5.2098826648843577]], dtype=object), (0, 0): array([[1.0000000000000002, 0.22088075779229027, 0.22088075779229013,
          0.22088075779229016, 0.35637871742636851, 0.35637871742636862,
          0.35637871742636917]], dtype=object)}}}, FiniteElement('Discontinuous Lagrange', Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2), 1, None): {None: {None: {(0, 1): array([[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0],
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
         [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]], dtype=object), (1, 0): array([[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0],
         [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], dtype=object), (0, 0): array([[0.33333333333333337, 0.10128650732345648, 0.10128650732345651,
          0.79742698535308731, 0.47014206410511522, 0.47014206410511522,
          0.059715871789769934],
         [0.33333333333333337, 0.7974269853530872, 0.1012865073234564,
          0.10128650732345637, 0.059715871789769795, 0.47014206410511511,
          0.47014206410511511],
         [0.33333333333333331, 0.10128650732345634, 0.79742698535308709,
          0.10128650732345634, 0.47014206410511505, 0.059715871789769726,
          0.47014206410511505]], dtype=object)}}}, FiniteElement('Lagrange', Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2), 1, None): {None: {None: {(0, 1): array([[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0],
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
         [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]], dtype=object), (1, 0): array([[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0],
         [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], dtype=object), (0, 0): array([[0.33333333333333337, 0.10128650732345648, 0.10128650732345651,
          0.79742698535308731, 0.47014206410511522, 0.47014206410511522,
          0.059715871789769934],
         [0.33333333333333337, 0.7974269853530872, 0.1012865073234564,
          0.10128650732345637, 0.059715871789769795, 0.47014206410511511,
          0.47014206410511511],
         [0.33333333333333331, 0.10128650732345634, 0.79742698535308709,
          0.10128650732345634, 0.47014206410511505, 0.059715871789769726,
          0.47014206410511505]], dtype=object)}}}}}
  
  QG-utils, psi_tables, flat_tables:
  {'FE0_D10': array([[3.4373799093713836e-16],
         [-1.9037602159047682],
         [3.9672666806617637e-15],
         [1.9037602159047715],
         [5.2098826648843648],
         [2.1527793290222102e-18],
         [-5.2098826648843577]], dtype=object), 'FE0_D01': array([[-1.1102230246251565e-16],
         [3.6637359812630166e-15],
         [-1.9037602159047706],
         [1.9037602159047724],
         [-2.2204460492503131e-16],
         [5.2098826648843648],
         [-5.2098826648843612]], dtype=object), 'FE1_D01': array([[-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0]], dtype=object), 'FE2': array([[0.33333333333333337, 0.33333333333333337, 0.33333333333333331],
         [0.10128650732345648, 0.7974269853530872, 0.10128650732345634],
         [0.10128650732345651, 0.1012865073234564, 0.79742698535308709],
         [0.79742698535308731, 0.10128650732345637, 0.10128650732345634],
         [0.47014206410511522, 0.059715871789769795, 0.47014206410511505],
         [0.47014206410511522, 0.47014206410511511, 0.059715871789769726],
         [0.059715871789769934, 0.47014206410511511, 0.47014206410511505]], dtype=object), 'FE1_D10': array([[-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0]], dtype=object), 'FE0': array([[1.0000000000000002],
         [0.22088075779229027],
         [0.22088075779229013],
         [0.22088075779229016],
         [0.35637871742636851],
         [0.35637871742636862],
         [0.35637871742636917]], dtype=object), 'FE1': array([[0.33333333333333337, 0.33333333333333337, 0.33333333333333331],
         [0.10128650732345648, 0.7974269853530872, 0.10128650732345634],
         [0.10128650732345651, 0.1012865073234564, 0.79742698535308709],
         [0.79742698535308731, 0.10128650732345637, 0.10128650732345634],
         [0.47014206410511522, 0.059715871789769795, 0.47014206410511505],
         [0.47014206410511522, 0.47014206410511511, 0.059715871789769726],
         [0.059715871789769934, 0.47014206410511511, 0.47014206410511505]], dtype=object), 'FE2_D10': array([[-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0]], dtype=object), 'FE2_D01': array([[-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0]], dtype=object)}
  
  tables: {'FE0_D10': array([[3.4373799093713836e-16],
         [-1.9037602159047682],
         [3.9672666806617637e-15],
         [1.9037602159047715],
         [5.2098826648843648],
         [2.1527793290222102e-18],
         [-5.2098826648843577]], dtype=object), 'FE0_D01': array([[-1.1102230246251565e-16],
         [3.6637359812630166e-15],
         [-1.9037602159047706],
         [1.9037602159047724],
         [-2.2204460492503131e-16],
         [5.2098826648843648],
         [-5.2098826648843612]], dtype=object), 'FE1_D01': array([[-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0]], dtype=object), 'FE1_D10': array([[-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0]], dtype=object), 'FE0': array([[1.0000000000000002],
         [0.22088075779229027],
         [0.22088075779229013],
         [0.22088075779229016],
         [0.35637871742636851],
         [0.35637871742636862],
         [0.35637871742636917]], dtype=object), 'FE1': array([[0.33333333333333337, 0.33333333333333337, 0.33333333333333331],
         [0.10128650732345648, 0.7974269853530872, 0.10128650732345634],
         [0.10128650732345651, 0.1012865073234564, 0.79742698535308709],
         [0.79742698535308731, 0.10128650732345637, 0.10128650732345634],
         [0.47014206410511522, 0.059715871789769795, 0.47014206410511505],
         [0.47014206410511522, 0.47014206410511511, 0.059715871789769726],
         [0.059715871789769934, 0.47014206410511511, 0.47014206410511505]], dtype=object)}
  
  name_map: {'FE1_D01': ['FE2_D01'], 'FE1_D10': ['FE2_D10'], 'FE1': ['FE2']}
  
  inv_name_map: {'FE0_D10': 'FE0_D10', 'FE0_D01': 'FE0_D01', 'FE1_D01': 'FE1_D01', 'FE2': 'FE1', 'FE1_D10': 'FE1_D10', 'FE0': 'FE0', 'FE1': 'FE1', 'FE2_D10': 'FE1_D10', 'FE2_D01': 'FE1_D01'}
  
  QG-utils, psi_tables, unique_tables:
  {'FE0_D10': array([[0],
         [-1.9037602159047682],
         [0],
         [1.9037602159047715],
         [5.2098826648843648],
         [0],
         [-5.2098826648843577]], dtype=object), 'FE0_D01': array([[0],
         [0],
         [-1.9037602159047706],
         [1.9037602159047724],
         [0],
         [5.2098826648843648],
         [-5.2098826648843612]], dtype=object), 'FE1_D01': array([[-1.0, 1.0],
         [-1.0, 1.0],
         [-1.0, 1.0],
         [-1.0, 1.0],
         [-1.0, 1.0],
         [-1.0, 1.0],
         [-1.0, 1.0]], dtype=object), 'FE0': array([[1.0000000000000002],
         [0.22088075779229027],
         [0.22088075779229013],
         [0.22088075779229016],
         [0.35637871742636851],
         [0.35637871742636862],
         [0.35637871742636917]], dtype=object), 'FE1': array([[0.33333333333333337, 0.33333333333333337, 0.33333333333333331],
         [0.10128650732345648, 0.7974269853530872, 0.10128650732345634],
         [0.10128650732345651, 0.1012865073234564, 0.79742698535308709],
         [0.79742698535308731, 0.10128650732345637, 0.10128650732345634],
         [0.47014206410511522, 0.059715871789769795, 0.47014206410511505],
         [0.47014206410511522, 0.47014206410511511, 0.059715871789769726],
         [0.059715871789769934, 0.47014206410511511, 0.47014206410511505]], dtype=object)}
  
  QG-utils, psi_tables, name_map:
  {'FE0_D10': ('FE0_D10', (), False, False), 'FE0_D01': ('FE0_D01', (), False, False), 'FE1_D01': ('FE1_D01', (0, [0, 2]), False, False), 'FE2': ('FE1', (), False, False), 'FE1_D10': ('FE1_D01', (1, [0, 1]), False, False), 'FE0': ('FE0', (), False, False), 'FE1': ('FE1', (), False, False), 'FE2_D10': ('FE1_D01', (1, [0, 1]), False, False), 'FE2_D01': ('FE1_D01', (0, [0, 2]), False, False)}
  Transforming cell integral
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00248 seconds
  Shape of reference tensor: (3, 3, 1)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 2 dims = [3, 1] indices = [[0, 0], [1, 0], [2, 0]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 1] indices = [[0, 0], [1, 0], [2, 0]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.0025 seconds
  Shape of reference tensor: (3, 3, 1)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 2 dims = [3, 1] indices = [[0, 0], [1, 0], [2, 0]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 1] indices = [[0, 0], [1, 0], [2, 0]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00252 seconds
  Shape of reference tensor: (3, 3, 1)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 2 dims = [3, 1] indices = [[0, 0], [1, 0], [2, 0]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 1] indices = [[0, 0], [1, 0], [2, 0]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00176 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00171 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.0017 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00258 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00252 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00264 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00255 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00256 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00266 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00267 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00267 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00277 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00284 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00294 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.0029 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00299 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.0029 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00285 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00283 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00284 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00282 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing quadrature representation
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  
  QG-utils, psi_tables:
  {6: {FiniteElement('Discontinuous Lagrange', Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2), 2, None): {None: {None: {(0, 1): array([[0.63369514596092058, 0.63369514596092025, -2.2673902919218314,
          -0.78379396366385989, -0.78379396366385934, 0.56758792732772056],
         [2.7755575615628914e-16, -2.2204460492503131e-16,
          -5.5511151231257827e-17, 4.8572257327350599e-17,
          -1.1102230246251565e-16, 1.3183898417423734e-16],
         [-0.63369514596091581, 2.2673902919218358, -0.63369514596091603,
          0.78379396366385989, -0.56758792732771934, 0.78379396366385978],
         [3.2673902919218341, 0.36630485403908319, 0.36630485403908319,
          0.4324120726722791, 1.7837939636638593, 1.7837939636638589],
         [-3.7747582837255322e-15, -2.9010854378827551, 2.9010854378827475,
          -2.4980018054066022e-16, 1.3513818909915796, -1.3513818909915798],
         [-3.2673902919218358, -0.36630485403908342, -0.36630485403908297,
          -0.43241207267227899, -1.78379396366386, -1.7837939636638598]], dtype=object), (1, 0): array([[0.63369514596092014, 0.63369514596092069, -2.2673902919218323,
          -0.78379396366385989, -0.78379396366385967, 0.56758792732772034],
         [2.2673902919218358, -0.63369514596091625, -0.63369514596091647,
          -0.56758792732772045, 0.78379396366386023, 0.78379396366385978],
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
         [0.36630485403908286, 3.2673902919218336, 0.36630485403908286,
          1.7837939636638591, 0.43241207267227894, 1.7837939636638591],
         [-0.36630485403908286, -3.2673902919218336, -0.36630485403908286,
          -1.7837939636638591, -0.43241207267227894, -1.7837939636638591],
         [-2.901085437882756, -4.9296699827375906e-15, 2.9010854378827484,
          1.35138189099158, -7.6450782352261042e-16, -1.3513818909915805]], dtype=object), (0, 0): array([[-0.074803807748196033, -0.074803807748195991, 0.51763234198767138,
          -0.048208377815511877, -0.048208377815511919, -0.084730493093977774],
         [0.51763234198767349, -0.074803807748196616, -0.07480380774819663,
          -0.084730493093977816, -0.048208377815511967, -0.048208377815512009],
         [-0.074803807748196643, 0.51763234198767361, -0.074803807748196643,
          -0.048208377815511891, -0.084730493093977843, -0.048208377815511891],
         [0.29921523099278691, 0.29921523099278691, 0.033544811523148657,
          0.19283351126204784, 0.19283351126204781, 0.79548022620090597],
         [0.033544811523148282, 0.2992152309927838, 0.29921523099278657,
          0.79548022620090597, 0.19283351126204779, 0.19283351126204784],
         [0.2992152309927838, 0.033544811523148269, 0.29921523099278663,
          0.19283351126204784, 0.79548022620090619, 0.19283351126204784]], dtype=object)}}}, FiniteElement('Discontinuous Lagrange', Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2), 1, None): {None: {None: {(0, 1): array([[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0],
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
         [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]], dtype=object), (1, 0): array([[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0],
         [1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], dtype=object), (0, 0): array([[0.091576213509770035, 0.091576213509770077, 0.81684757298045807,
          0.44594849091596506, 0.445948490915965, 0.10810301816807004],
         [0.81684757298045907, 0.091576213509771076, 0.091576213509770979,
          0.10810301816807004, 0.445948490915965, 0.44594849091596506],
         [0.091576213509770993, 0.81684757298045896, 0.091576213509770993,
          0.445948490915965, 0.10810301816807, 0.445948490915965]], dtype=object)}}}, FiniteElement('Lagrange', Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2), 1, None): {None: {None: {(0, 1): array([[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0],
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
         [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]], dtype=object), (1, 0): array([[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0],
         [1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], dtype=object), (0, 0): array([[0.091576213509770035, 0.091576213509770077, 0.81684757298045807,
          0.44594849091596506, 0.445948490915965, 0.10810301816807004],
         [0.81684757298045907, 0.091576213509771076, 0.091576213509770979,
          0.10810301816807004, 0.445948490915965, 0.44594849091596506],
         [0.091576213509770993, 0.81684757298045896, 0.091576213509770993,
          0.445948490915965, 0.10810301816807, 0.445948490915965]], dtype=object)}}}}}
  
  QG-utils, psi_tables, flat_tables:
  {'FE0_D10': array([[-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0]], dtype=object), 'FE0_D01': array([[-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0]], dtype=object), 'FE1_D01': array([[-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0]], dtype=object), 'FE2': array([[-0.074803807748196033, 0.51763234198767349, -0.074803807748196643,
          0.29921523099278691, 0.033544811523148282, 0.2992152309927838],
         [-0.074803807748195991, -0.074803807748196616, 0.51763234198767361,
          0.29921523099278691, 0.2992152309927838, 0.033544811523148269],
         [0.51763234198767138, -0.07480380774819663, -0.074803807748196643,
          0.033544811523148657, 0.29921523099278657, 0.29921523099278663],
         [-0.048208377815511877, -0.084730493093977816,
          -0.048208377815511891, 0.19283351126204784, 0.79548022620090597,
          0.19283351126204784],
         [-0.048208377815511919, -0.048208377815511967,
          -0.084730493093977843, 0.19283351126204781, 0.19283351126204779,
          0.79548022620090619],
         [-0.084730493093977774, -0.048208377815512009,
          -0.048208377815511891, 0.79548022620090597, 0.19283351126204784,
          0.19283351126204784]], dtype=object), 'FE1_D10': array([[-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0]], dtype=object), 'FE0': array([[0.091576213509770035, 0.81684757298045907, 0.091576213509770993],
         [0.091576213509770077, 0.091576213509771076, 0.81684757298045896],
         [0.81684757298045807, 0.091576213509770979, 0.091576213509770993],
         [0.44594849091596506, 0.10810301816807004, 0.445948490915965],
         [0.445948490915965, 0.445948490915965, 0.10810301816807],
         [0.10810301816807004, 0.44594849091596506, 0.445948490915965]], dtype=object), 'FE1': array([[0.091576213509770035, 0.81684757298045907, 0.091576213509770993],
         [0.091576213509770077, 0.091576213509771076, 0.81684757298045896],
         [0.81684757298045807, 0.091576213509770979, 0.091576213509770993],
         [0.44594849091596506, 0.10810301816807004, 0.445948490915965],
         [0.445948490915965, 0.445948490915965, 0.10810301816807],
         [0.10810301816807004, 0.44594849091596506, 0.445948490915965]], dtype=object), 'FE2_D10': array([[0.63369514596092014, 2.2673902919218358, 0.0, 0.36630485403908286,
          -0.36630485403908286, -2.901085437882756],
         [0.63369514596092069, -0.63369514596091625, 0.0, 3.2673902919218336,
          -3.2673902919218336, -4.9296699827375906e-15],
         [-2.2673902919218323, -0.63369514596091647, 0.0,
          0.36630485403908286, -0.36630485403908286, 2.9010854378827484],
         [-0.78379396366385989, -0.56758792732772045, 0.0,
          1.7837939636638591, -1.7837939636638591, 1.35138189099158],
         [-0.78379396366385967, 0.78379396366386023, 0.0,
          0.43241207267227894, -0.43241207267227894, -7.6450782352261042e-16],
         [0.56758792732772034, 0.78379396366385978, 0.0, 1.7837939636638591,
          -1.7837939636638591, -1.3513818909915805]], dtype=object), 'FE2_D01': array([[0.63369514596092058, 2.7755575615628914e-16, -0.63369514596091581,
          3.2673902919218341, -3.7747582837255322e-15, -3.2673902919218358],
         [0.63369514596092025, -2.2204460492503131e-16, 2.2673902919218358,
          0.36630485403908319, -2.9010854378827551, -0.36630485403908342],
         [-2.2673902919218314, -5.5511151231257827e-17, -0.63369514596091603,
          0.36630485403908319, 2.9010854378827475, -0.36630485403908297],
         [-0.78379396366385989, 4.8572257327350599e-17, 0.78379396366385989,
          0.4324120726722791, -2.4980018054066022e-16, -0.43241207267227899],
         [-0.78379396366385934, -1.1102230246251565e-16,
          -0.56758792732771934, 1.7837939636638593, 1.3513818909915796,
          -1.78379396366386],
         [0.56758792732772056, 1.3183898417423734e-16, 0.78379396366385978,
          1.7837939636638589, -1.3513818909915798, -1.7837939636638598]], dtype=object)}
  
  tables: {'FE0_D10': array([[-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0]], dtype=object), 'FE0_D01': array([[-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0]], dtype=object), 'FE2': array([[-0.074803807748196033, 0.51763234198767349, -0.074803807748196643,
          0.29921523099278691, 0.033544811523148282, 0.2992152309927838],
         [-0.074803807748195991, -0.074803807748196616, 0.51763234198767361,
          0.29921523099278691, 0.2992152309927838, 0.033544811523148269],
         [0.51763234198767138, -0.07480380774819663, -0.074803807748196643,
          0.033544811523148657, 0.29921523099278657, 0.29921523099278663],
         [-0.048208377815511877, -0.084730493093977816,
          -0.048208377815511891, 0.19283351126204784, 0.79548022620090597,
          0.19283351126204784],
         [-0.048208377815511919, -0.048208377815511967,
          -0.084730493093977843, 0.19283351126204781, 0.19283351126204779,
          0.79548022620090619],
         [-0.084730493093977774, -0.048208377815512009,
          -0.048208377815511891, 0.79548022620090597, 0.19283351126204784,
          0.19283351126204784]], dtype=object), 'FE0': array([[0.091576213509770035, 0.81684757298045907, 0.091576213509770993],
         [0.091576213509770077, 0.091576213509771076, 0.81684757298045896],
         [0.81684757298045807, 0.091576213509770979, 0.091576213509770993],
         [0.44594849091596506, 0.10810301816807004, 0.445948490915965],
         [0.445948490915965, 0.445948490915965, 0.10810301816807],
         [0.10810301816807004, 0.44594849091596506, 0.445948490915965]], dtype=object), 'FE2_D10': array([[0.63369514596092014, 2.2673902919218358, 0.0, 0.36630485403908286,
          -0.36630485403908286, -2.901085437882756],
         [0.63369514596092069, -0.63369514596091625, 0.0, 3.2673902919218336,
          -3.2673902919218336, -4.9296699827375906e-15],
         [-2.2673902919218323, -0.63369514596091647, 0.0,
          0.36630485403908286, -0.36630485403908286, 2.9010854378827484],
         [-0.78379396366385989, -0.56758792732772045, 0.0,
          1.7837939636638591, -1.7837939636638591, 1.35138189099158],
         [-0.78379396366385967, 0.78379396366386023, 0.0,
          0.43241207267227894, -0.43241207267227894, -7.6450782352261042e-16],
         [0.56758792732772034, 0.78379396366385978, 0.0, 1.7837939636638591,
          -1.7837939636638591, -1.3513818909915805]], dtype=object), 'FE2_D01': array([[0.63369514596092058, 2.7755575615628914e-16, -0.63369514596091581,
          3.2673902919218341, -3.7747582837255322e-15, -3.2673902919218358],
         [0.63369514596092025, -2.2204460492503131e-16, 2.2673902919218358,
          0.36630485403908319, -2.9010854378827551, -0.36630485403908342],
         [-2.2673902919218314, -5.5511151231257827e-17, -0.63369514596091603,
          0.36630485403908319, 2.9010854378827475, -0.36630485403908297],
         [-0.78379396366385989, 4.8572257327350599e-17, 0.78379396366385989,
          0.4324120726722791, -2.4980018054066022e-16, -0.43241207267227899],
         [-0.78379396366385934, -1.1102230246251565e-16,
          -0.56758792732771934, 1.7837939636638593, 1.3513818909915796,
          -1.78379396366386],
         [0.56758792732772056, 1.3183898417423734e-16, 0.78379396366385978,
          1.7837939636638589, -1.3513818909915798, -1.7837939636638598]], dtype=object)}
  
  name_map: {'FE0_D10': ['FE1_D10'], 'FE0_D01': ['FE1_D01'], 'FE0': ['FE1']}
  
  inv_name_map: {'FE0_D10': 'FE0_D10', 'FE0_D01': 'FE0_D01', 'FE1_D01': 'FE0_D01', 'FE2': 'FE2', 'FE1_D10': 'FE0_D10', 'FE0': 'FE0', 'FE1': 'FE0', 'FE2_D10': 'FE2_D10', 'FE2_D01': 'FE2_D01'}
  
  QG-utils, psi_tables, unique_tables:
  {'FE0_D01': array([[-1.0, 1.0],
         [-1.0, 1.0],
         [-1.0, 1.0],
         [-1.0, 1.0],
         [-1.0, 1.0],
         [-1.0, 1.0]], dtype=object), 'FE2': array([[-0.074803807748196033, 0.51763234198767349, -0.074803807748196643,
          0.29921523099278691, 0.033544811523148282, 0.2992152309927838],
         [-0.074803807748195991, -0.074803807748196616, 0.51763234198767361,
          0.29921523099278691, 0.2992152309927838, 0.033544811523148269],
         [0.51763234198767138, -0.07480380774819663, -0.074803807748196643,
          0.033544811523148657, 0.29921523099278657, 0.29921523099278663],
         [-0.048208377815511877, -0.084730493093977816,
          -0.048208377815511891, 0.19283351126204784, 0.79548022620090597,
          0.19283351126204784],
         [-0.048208377815511919, -0.048208377815511967,
          -0.084730493093977843, 0.19283351126204781, 0.19283351126204779,
          0.79548022620090619],
         [-0.084730493093977774, -0.048208377815512009,
          -0.048208377815511891, 0.79548022620090597, 0.19283351126204784,
          0.19283351126204784]], dtype=object), 'FE0': array([[0.091576213509770035, 0.81684757298045907, 0.091576213509770993],
         [0.091576213509770077, 0.091576213509771076, 0.81684757298045896],
         [0.81684757298045807, 0.091576213509770979, 0.091576213509770993],
         [0.44594849091596506, 0.10810301816807004, 0.445948490915965],
         [0.445948490915965, 0.445948490915965, 0.10810301816807],
         [0.10810301816807004, 0.44594849091596506, 0.445948490915965]], dtype=object), 'FE2_D10': array([[0.63369514596092014, 2.2673902919218358, 0.36630485403908286,
          -0.36630485403908286, -2.901085437882756],
         [0.63369514596092069, -0.63369514596091625, 3.2673902919218336,
          -3.2673902919218336, 0],
         [-2.2673902919218323, -0.63369514596091647, 0.36630485403908286,
          -0.36630485403908286, 2.9010854378827484],
         [-0.78379396366385989, -0.56758792732772045, 1.7837939636638591,
          -1.7837939636638591, 1.35138189099158],
         [-0.78379396366385967, 0.78379396366386023, 0.43241207267227894,
          -0.43241207267227894, 0],
         [0.56758792732772034, 0.78379396366385978, 1.7837939636638591,
          -1.7837939636638591, -1.3513818909915805]], dtype=object), 'FE2_D01': array([[0.63369514596092058, -0.63369514596091581, 3.2673902919218341, 0,
          -3.2673902919218358],
         [0.63369514596092025, 2.2673902919218358, 0.36630485403908319,
          -2.9010854378827551, -0.36630485403908342],
         [-2.2673902919218314, -0.63369514596091603, 0.36630485403908319,
          2.9010854378827475, -0.36630485403908297],
         [-0.78379396366385989, 0.78379396366385989, 0.4324120726722791, 0,
          -0.43241207267227899],
         [-0.78379396366385934, -0.56758792732771934, 1.7837939636638593,
          1.3513818909915796, -1.78379396366386],
         [0.56758792732772056, 0.78379396366385978, 1.7837939636638589,
          -1.3513818909915798, -1.7837939636638598]], dtype=object)}
  
  QG-utils, psi_tables, name_map:
  {'FE0_D10': ('FE0_D01', (1, [0, 1]), False, False), 'FE0_D01': ('FE0_D01', (0, [0, 2]), False, False), 'FE1_D01': ('FE0_D01', (0, [0, 2]), False, False), 'FE2': ('FE2', (), False, False), 'FE1_D10': ('FE0_D01', (1, [0, 1]), False, False), 'FE0': ('FE0', (), False, False), 'FE1': ('FE0', (), False, False), 'FE2_D10': ('FE2_D10', (3, [0, 1, 3, 4, 5]), False, False), 'FE2_D01': ('FE2_D01', (2, [0, 2, 3, 4, 5]), False, False)}
  Transforming cell integral
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00231 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00223 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00221 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00173 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00127 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00177 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00152 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.0017 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00147 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00165 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00147 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00248 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00214 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00243 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.0021 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00245 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.0021 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00244 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00211 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00248 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00211 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00245 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00206 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00238 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00205 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00239 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00204 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.0024 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00206 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00239 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00206 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00243 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00204 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00239 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00206 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00242 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.0021 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00246 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00211 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00237 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00208 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00238 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00203 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00239 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00205 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00238 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00204 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00238 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00205 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00236 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00197 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00234 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00199 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00237 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00203 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00237 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00204 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00238 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00207 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00241 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00201 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00236 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00203 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.0024 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00204 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00238 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00201 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.0024 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00201 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00239 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00205 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00242 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00204 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00239 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00204 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00237 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00208 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00238 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00203 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.0024 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.0021 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00243 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00209 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  36 entries computed in 0.000598 seconds
  Shape of reference tensor: (3, 3, 2, 2)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 2 dims = [2, 2] indices = [[0, 0], [0, 1], [1, 0], [1, 1]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [2, 2] indices = [[0, 0], [0, 1], [1, 0], [1, 1]]
  External multi index:  rank = 1 dims = [2] indices = [[0], [1]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  9 entries computed in 0.000567 seconds
  Shape of reference tensor: (3, 3)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  9 entries computed in 0.000864 seconds
  Shape of reference tensor: (3, 3)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  9 entries computed in 0.000856 seconds
  Shape of reference tensor: (3, 3)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  9 entries computed in 0.000839 seconds
  Shape of reference tensor: (3, 3)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Precomputing integrals on reference element
  Reusing element from cache
  3 entries computed in 0.000399 seconds
  Shape of reference tensor: (3,)
  Primary multi index:   rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing representation of forms
  
Compiler stage 2 finished in 0.394794 seconds.

Compiler stage 3: Optimizing intermediate representation
--------------------------------------------------------
  FErari not installed, skipping tensor optimizations
  FErari not installed, skipping tensor optimizations
  Optimising expressions for cell integral
  FErari not installed, skipping tensor optimizations
  FErari not installed, skipping tensor optimizations
  Optimising expressions for cell integral
  FErari not installed, skipping tensor optimizations
  FErari not installed, skipping tensor optimizations
  FErari not installed, skipping tensor optimizations
  Optimising expressions for cell integral
  FErari not installed, skipping tensor optimizations
  FErari not installed, skipping tensor optimizations
  FErari not installed, skipping tensor optimizations
  FErari not installed, skipping tensor optimizations
  FErari not installed, skipping tensor optimizations
  FErari not installed, skipping tensor optimizations
  FErari not installed, skipping tensor optimizations
  FErari not installed, skipping tensor optimizations
  
Compiler stage 3 finished in 0.00713611 seconds.

Compiler stage 4: Generating code
---------------------------------
  Generating code for 6 element(s)
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp0
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: Y
  Removing unused variable: X
  Removing unused variable: C1
  Removing unused variable: C0
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Generating code for 6 dofmap(s)
  Generating code for integrals
  Removing unused variable: circumradius
  Removing unused variable: v0v1
  Removing unused variable: v0v2
  Removing unused variable: v1v2
  Removing unused variable: volume
  Cell, number of operations to compute tensor: 378
  Removing unused variable: circumradius
  Removing unused variable: v0v1
  Removing unused variable: v0v2
  Removing unused variable: v1v2
  Removing unused variable: volume
  Cell, number of operations to compute tensor: 418
  Removing unused variable: det
  Removing unused variable: dx1
  Removing unused variable: dx0
  Removing unused variable: v1
  Removing unused variable: v0
  Removing unused variable: edge_vertices
  Removing unused variable: circumradius
  Removing unused variable: v0v1
  Removing unused variable: v0v2
  Removing unused variable: v1v2
  Removing unused variable: volume
  Cell, number of operations to compute tensor: 558
  Generating code for forms
  
Compiler stage 4 finished in 0.241231 seconds.

Compiler stage 4.1: Generating additional wrapper code
------------------------------------------------------
  Generating wrapper code for DOLFIN
  
Compiler stage 4.1 finished in 0.00198698 seconds.

Compiler stage 5: Formatting code
---------------------------------
  Output written to ./AdaptivePoisson.h.
  
Compiler stage 5 finished in 0.00136709 seconds.

[1;37;32mFFC finished in 0.715476 seconds.[0m
